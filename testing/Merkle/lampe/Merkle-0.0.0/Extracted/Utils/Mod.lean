-- Generated by lampe

import «Merkle-0.0.0».Extracted.GeneratedTypes
import Lampe

open Lampe

noir_def «Merkle-0.0.0»::utils::rl<>(u: u8) -> u8 := {
  let top_bit = (#_uShr returning u8)(u, (7: u8));
  (#_uOr returning u8)((#_uShl returning u8)(u, (1: u8)), top_bit)
}

noir_def «Merkle-0.0.0»::utils::rotate_left<>(u: u8, N: u8) -> u8 := {
  let mut result = u;
  for _ in (0: u8) .. N do {
    result = («Merkle-0.0.0»::utils::rl<> as λ(u8) -> u8)(result);
    #_skip
  };
  result
}

noir_def «Merkle-0.0.0»::utils::sbox<>(v: u8) -> u8 := {
  let x1 = (#_uNot returning u8)(v);
  let x2 = («Merkle-0.0.0»::utils::rotate_left<> as λ(u8, u8) -> u8)(x1, (1: u8));
  let x3 = («Merkle-0.0.0»::utils::rotate_left<> as λ(u8, u8) -> u8)(v, (2: u8));
  let x4 = («Merkle-0.0.0»::utils::rotate_left<> as λ(u8, u8) -> u8)(v, (3: u8));
  let x5 = (#_uAnd returning u8)((#_uAnd returning u8)(x2, x3), x4);
  let x6 = («Merkle-0.0.0»::utils::rotate_left<> as λ(u8, u8) -> u8)(x5, (1: u8));
  (#_uXor returning u8)(v, x6)
}

noir_def «Merkle-0.0.0»::utils::sgn0<>(self: Field) -> u1 := {
  (#_cast returning u1)(self)
}

noir_def «Merkle-0.0.0»::utils::as_array<>(self: Slice<u8>) -> Array<u8, 32: u32> := {
  let mut array = (#_mkRepeatedArray returning Array<u8, 32: u32>)((0: u8));
  for i in (0: u32) .. (32: u32) do {
    (array[i]: u8) = (#_sliceIndex returning u8)(self, (#_cast returning u32)(i));
    #_skip
  };
  array
}

noir_def «Merkle-0.0.0»::utils::square<>(a: Field) -> Field := {
  (#_fMul returning Field)((#_fMul returning Field)(a, a), («Merkle-0.0.0»::globals::SIGMA<> as λ() -> Field)())
}

def «Merkle-0.0.0».Utils.Mod.env : Env := Env.mk
  [«Merkle-0.0.0::utils::rl», «Merkle-0.0.0::utils::rotate_left», «Merkle-0.0.0::utils::sbox», «Merkle-0.0.0::utils::sgn0», «Merkle-0.0.0::utils::as_array», «Merkle-0.0.0::utils::square»]
  []
