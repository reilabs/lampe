-- Generated by lampe

import «skyscraper-0.0.0».Extracted.GeneratedTypes
import Lampe

open Lampe

noir_def «skyscraper-0.0.0»::components::rl<>(u: u8) -> u8 := {
  let top_bit = (#_uShr returning u8)(u, (7: u8));
  (#_uOr returning u8)((#_uShl returning u8)(u, (1: u8)), top_bit)
}

noir_def «skyscraper-0.0.0»::components::rotate_left<>(u: u8, N: u8) -> u8 := {
  let mut result = u;
  for _ in (0: u8) .. N do {
    result = («skyscraper-0.0.0»::components::rl<> as λ(u8) -> u8)(result);
    #_skip
  };
  result
}

noir_def «skyscraper-0.0.0»::components::sbox<>(v: u8) -> u8 := {
  let x1 = (#_uNot returning u8)(v);
  let x2 = («skyscraper-0.0.0»::components::rotate_left<> as λ(u8, u8) -> u8)(x1, (1: u8));
  let x3 = («skyscraper-0.0.0»::components::rotate_left<> as λ(u8, u8) -> u8)(v, (2: u8));
  let x4 = («skyscraper-0.0.0»::components::rotate_left<> as λ(u8, u8) -> u8)(v, (3: u8));
  let x5 = (#_uAnd returning u8)((#_uAnd returning u8)(x2, x3), x4);
  let x6 = («skyscraper-0.0.0»::components::rotate_left<> as λ(u8, u8) -> u8)(x5, (1: u8));
  (#_uXor returning u8)(v, x6)
}

noir_def «skyscraper-0.0.0»::components::square<>(a: Field) -> Field := {
  (#_fMul returning Field)((#_fMul returning Field)(a, a), («skyscraper-0.0.0»::globals::SIGMA<> as λ() -> Field)())
}

def «skyscraper-0.0.0».Components.env : Env := Env.mk
  [«skyscraper-0.0.0::components::rl», «skyscraper-0.0.0::components::rotate_left», «skyscraper-0.0.0::components::sbox», «skyscraper-0.0.0::components::square»]
  []
