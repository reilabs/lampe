-- Generated by lampe

import «Merkle-1.0.0».Extracted.GeneratedTypes
import Lampe

open Lampe

noir_def «Merkle-1.0.0»::utils::bits::to_le_bits<>(self: Field) -> Array<u1, 256: u32> := {
  let mut val = self;
  let mut bits = (#_mkRepeatedArray returning Array<u1, 256: u32>)((0: u1));
  for i in (0: u32) .. (256: u32) do {
    (bits[i]: u1) = («Merkle-1.0.0»::utils::sgn0<> as λ(Field) -> u1)(val);
    if (#_uEq returning bool)((#_arrayIndex returning u1)(bits, (#_cast returning u32)(i)), (0: u1)) then {
      val = (#_fDiv returning Field)(val, (2: Field));
      #_skip
    } else {
      val = (#_fDiv returning Field)((#_fSub returning Field)(val, (1: Field)), (2: Field));
      #_skip
    }
  };
  bits
}

def «Merkle-1.0.0».Utils.Bits.Mod.env : Env := Env.mk
  [«Merkle-1.0.0::utils::bits::to_le_bits»]
  []
