-- Generated by lampe

import «std-1.0.0-beta.12».Extracted.GeneratedTypes
import Lampe

open Lampe

noir_struct_def «ExtractionTests-0.0.0»::struct_namespaces::test::Foo<> {
  Field,
}

noir_struct_def «ExtractionTests-0.0.0»::associated_type::Pair<> {
  Field,
  Field,
}

noir_type_alias «ExtractionTests-0.0.0»::associated_type::Bar<> := «ExtractionTests-0.0.0»::associated_type::Pair<>;

noir_struct_def «ExtractionTests-0.0.0»::experiments::Option2<T: Type> {
  bool,
  T,
}

noir_type_alias «ExtractionTests-0.0.0»::experiments::AliasedOpt<T: Type> := «ExtractionTests-0.0.0»::experiments::Option2<T>;

noir_struct_def «ExtractionTests-0.0.0»::type_order::BarStruct<> {
  Field,
}

noir_type_alias «ExtractionTests-0.0.0»::type_order::BarType<> := «ExtractionTests-0.0.0»::type_order::BarStruct<>;

noir_type_alias «ExtractionTests-0.0.0»::type_order::FooType<> := Field;

noir_struct_def «ExtractionTests-0.0.0»::type_order::FooStruct<> {
  @«ExtractionTests-0.0.0»::type_order::FooType<>,
}

noir_struct_def «ExtractionTests-0.0.0»::multiple_generics::Pair<I: Type> {
  I,
  I,
}

noir_struct_def «ExtractionTests-0.0.0»::patterns::Option1<T: Type> {
  bool,
  T,
}

noir_struct_def «ExtractionTests-0.0.0»::patterns::Option2<T: Type> {
  bool,
  T,
}

noir_trait_def «ExtractionTests-0.0.0»::associated_type::Foo<> [Out: Type] := {
  method foo_meth<>(Self) -> Out;
}

noir_trait_def «ExtractionTests-0.0.0»::experiments::MyTrait<> [] := {
  method foo<>(Self) -> Self;
}

noir_trait_def «ExtractionTests-0.0.0»::multiple_generics::Foo<I: Type> [] := {
  method foo3<>(Self) -> I;
}

