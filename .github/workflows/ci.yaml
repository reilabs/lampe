name: CI
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
jobs:
  ensure-noir-version:
    name: "Check Noir Versions"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current branch
        uses: actions/checkout@v5
      - name: Install xonsh
        run: |
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get update
          sudo apt-get install -yq python3 pipx
          pipx install 'xonsh[full]'
      - name: Install xonsh (python) dependencies
        run: xonsh -c 'xpip install -r scripts/requirements.txt'
      - name: Check if noir version match everywhere
        run: scripts/check_noir_version_consistency.xsh

  build-lake:
    name: "Build Lampe"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current branch (sparse)
        uses: actions/checkout@v5
        with:
          sparse-checkout: |
            Lampe
      - name: Set up Lean 4
        uses: leanprover/lean-action@v1
        with:
          auto-config: false
          build: false
          test: false
          lint: false
          use-mathlib-cache: true
          lake-package-directory: Lampe
      - name: Make All (Lampe)
        working-directory: Lampe
        run: lake exe mk_all --check --lib Lampe
      - name: Build Lampe
        working-directory: Lampe
        run: lake build
      - name: Test Lampe
        working-directory: Lampe
        run: lake test

  build-stdlib:
    name: "Build Stdlib"
    needs: [ build-lake, build-cargo ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current branch (sparse)
        uses: actions/checkout@v5
      - name: Install xonsh
        run: |
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get update
          sudo apt-get install -yq python3 pipx
          pipx install 'xonsh[full]'
      - name: Install xonsh (python) dependencies
        run: xonsh -c 'xpip install -r scripts/requirements.txt'
      - name: Set up Lean 4
        uses: leanprover/lean-action@v1
        with:
          auto-config: false
          build: false
          test: false
          lint: false
          use-mathlib-cache: true
          lake-package-directory: Lampe
      - name: Test Stdlib Extraction
        run: ./stdlib/test.xsh

  build-cargo:
    name: "Build Rust"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current branch
        uses: actions/checkout@v5
        with:
          path: lampe
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.90.0
          default: true
          components: rustfmt, clippy
      - name: Build (cargo)
        working-directory: lampe
        run: cargo build --release

  check-rust-formatting:
    name: "Check Rust Formatting"
    runs-on: "ubuntu-latest"
    steps:
      - name: Checkout Code
        uses: actions/checkout@v5
        with:
          submodules: recursive
      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          override: true
          components: rustfmt
      - name: Check Formatting
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  lint-rust:
    name: "Lint Rust"
    needs: build-cargo
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current branch
        uses: actions/checkout@v5
        with:
          path: lampe
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.90.0
          default: true
          components: rustfmt, clippy
      - name: Lint (clippy)
        working-directory: lampe
        run: RUSTFLAGS="-Dwarnings" cargo clippy --all-targets --all-features

  test-cargo:
    name: "Test Rust"
    needs: build-cargo
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current branch
        uses: actions/checkout@v5
        with:
          path: lampe
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.90.0
          default: true
          components: rustfmt, clippy
      - name: Test (cargo)
        working-directory: lampe
        run: cargo test --all

  end-to-end:
    name: "E2E Tests"
    needs: [ build-lake, build-cargo ]
    runs-on: ubuntu-latest
    env:
      LAMPE_TEST_CURRENT_COMMIT_SHA: ${{ github.head_ref || github.ref_name }}
    steps:
      - name: Checkout current branch
        uses: actions/checkout@v5
        with:
          path: lampe
      - name: Install xonsh
        run: |
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get update
          sudo apt-get install -yq python3 pipx
          pipx install 'xonsh[full]'
      - name: Install xonsh (python) dependencies
        working-directory: lampe
        run: xonsh -c 'xpip install -r scripts/requirements.txt'
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.90.0
          default: true
          components: rustfmt, clippy
      - name: Set up Lean 4
        uses: leanprover/lean-action@v1
        with:
          auto-config: false
          build: false
          test: false
          lint: false
          use-mathlib-cache: true
          lake-package-directory: lampe/Lampe
      - name: Run test script
        working-directory: lampe
        run: ./testing/test.xsh

  examples:
    name: "Examples"
    needs: [ build-lake, build-cargo ]
    runs-on: ubuntu-latest
    env:
      LAMPE_TEST_CURRENT_COMMIT_SHA: ${{ github.head_ref || github.ref_name }}
    steps:
      - name: Checkout current branch
        uses: actions/checkout@v5
        with:
          path: lampe
      - name: Install xonsh
        run: |
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get update
          sudo apt-get install -yq python3 pipx
          pipx install 'xonsh[full]'
      - name: Install xonsh (python) dependencies
        working-directory: lampe
        run: xonsh -c 'xpip install -r scripts/requirements.txt'
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.90.0
          default: true
          components: rustfmt, clippy
      - name: Set up Lean 4
        uses: leanprover/lean-action@v1
        with:
          auto-config: false
          build: false
          test: false
          lint: false
          use-mathlib-cache: true
          lake-package-directory: lampe/Lampe
      - name: Run test script on examples
        working-directory: lampe
        run: ./examples/test.xsh
