-- Generated by lampe

import «std-1.0.0-beta.12».Extracted.GeneratedTypes
import Lampe

open Lampe

noir_def «std-1.0.0-beta.12»::array::check_shuffle::__get_shuffle_indices<T: Type, N: u32>(lhs: Array<T, N: u32>, rhs: Array<T, N: u32>) -> Array<u32, N: u32> := {
  (#_fresh returning Array<u32, N: u32>)()
}

noir_def «std-1.0.0-beta.12»::array::check_shuffle::__get_index<N: u32>(indices: Array<u32, N: u32>, idx: u32) -> u32 := {
  (#_fresh returning u32)()
}

noir_def «std-1.0.0-beta.12»::array::check_shuffle::check_shuffle<T: Type, N: u32>(lhs: Array<T, N: u32>, rhs: Array<T, N: u32>) -> Unit := {
  let shuffle_indices = («std-1.0.0-beta.12»::array::check_shuffle::__get_shuffle_indices<T, N: u32> as λ(Array<T, N: u32>, Array<T, N: u32>) -> Array<u32, N: u32>)(lhs, rhs);
  for i in (0: u32) .. uConst!(N: u32) do {
    let idx = («std-1.0.0-beta.12»::array::check_shuffle::__get_index<N: u32> as λ(Array<u32, N: u32>, u32) -> u32)(shuffle_indices, i);
    (#_assert returning Unit)((#_uEq returning bool)((#_arrayIndex returning u32)(shuffle_indices, (#_cast returning u32)(idx)), i));
    #_skip
  };
  for i in (0: u32) .. uConst!(N: u32) do {
    let idx = (#_arrayIndex returning u32)(shuffle_indices, (#_cast returning u32)(i));
    let expected = (#_arrayIndex returning T)(rhs, (#_cast returning u32)(idx));
    let result = (#_arrayIndex returning T)(lhs, (#_cast returning u32)(i));
    (#_assert returning Unit)(((T as «std-1.0.0-beta.12»::cmp::Eq<>)::eq<> as λ(T, T) -> bool)(expected, result));
    #_skip
  };
  #_skip
}

noir_trait_impl[«std-1.0.0-beta.12».impl_23]<> «std-1.0.0-beta.12»::cmp::Eq<> for «std-1.0.0-beta.12»::array::check_shuffle::test::CompoundStruct<> where [] := {
  noir_def eq<>(self: «std-1.0.0-beta.12»::array::check_shuffle::test::CompoundStruct<>, other: «std-1.0.0-beta.12»::array::check_shuffle::test::CompoundStruct<>) -> bool := {
    (#_bAnd returning bool)((#_bAnd returning bool)((#_bEq returning bool)(self.0, other.0), (#_fEq returning bool)(self.1, other.1)), (#_uEq returning bool)(self.2, other.2))
  };
}

noir_def «std-1.0.0-beta.12»::array::check_shuffle::test::test_shuffle<>() -> Unit := {
  let lhs = (#_mkArray returning Array<Field, 5: u32>)((0: Field), (1: Field), (2: Field), (3: Field), (4: Field));
  let rhs = (#_mkArray returning Array<Field, 5: u32>)((2: Field), (0: Field), (3: Field), (1: Field), (4: Field));
  («std-1.0.0-beta.12»::array::check_shuffle::check_shuffle<Field, 5: u32> as λ(Array<Field, 5: u32>, Array<Field, 5: u32>) -> Unit)(lhs, rhs);
  #_skip
}

noir_def «std-1.0.0-beta.12»::array::check_shuffle::test::test_shuffle_identity<>() -> Unit := {
  let lhs = (#_mkArray returning Array<Field, 5: u32>)((0: Field), (1: Field), (2: Field), (3: Field), (4: Field));
  let rhs = (#_mkArray returning Array<Field, 5: u32>)((0: Field), (1: Field), (2: Field), (3: Field), (4: Field));
  («std-1.0.0-beta.12»::array::check_shuffle::check_shuffle<Field, 5: u32> as λ(Array<Field, 5: u32>, Array<Field, 5: u32>) -> Unit)(lhs, rhs);
  #_skip
}

noir_def «std-1.0.0-beta.12»::array::check_shuffle::test::test_shuffle_fail<>() -> Unit := {
  let lhs = (#_mkArray returning Array<Field, 5: u32>)((0: Field), (1: Field), (2: Field), (3: Field), (4: Field));
  let rhs = (#_mkArray returning Array<Field, 5: u32>)((0: Field), (1: Field), (2: Field), (3: Field), (5: Field));
  («std-1.0.0-beta.12»::array::check_shuffle::check_shuffle<Field, 5: u32> as λ(Array<Field, 5: u32>, Array<Field, 5: u32>) -> Unit)(lhs, rhs);
  #_skip
}

noir_def «std-1.0.0-beta.12»::array::check_shuffle::test::test_shuffle_duplicates<>() -> Unit := {
  let lhs = (#_mkArray returning Array<Field, 5: u32>)((0: Field), (1: Field), (2: Field), (3: Field), (4: Field));
  let rhs = (#_mkArray returning Array<Field, 5: u32>)((0: Field), (1: Field), (2: Field), (3: Field), (3: Field));
  («std-1.0.0-beta.12»::array::check_shuffle::check_shuffle<Field, 5: u32> as λ(Array<Field, 5: u32>, Array<Field, 5: u32>) -> Unit)(lhs, rhs);
  #_skip
}

noir_def «std-1.0.0-beta.12»::array::check_shuffle::test::test_shuffle_compound_struct<>() -> Unit := {
  let lhs = (#_mkArray returning Array<«std-1.0.0-beta.12»::array::check_shuffle::test::CompoundStruct<>, 5: u32>)((#_makeData returning «std-1.0.0-beta.12»::array::check_shuffle::test::CompoundStruct<>)(#_false, (0: Field), (12345: u64)), (#_makeData returning «std-1.0.0-beta.12»::array::check_shuffle::test::CompoundStruct<>)(#_false, (-100: Field), (54321: u64)), (#_makeData returning «std-1.0.0-beta.12»::array::check_shuffle::test::CompoundStruct<>)(#_true, (5: Field), (18446744073709551615: u64)), (#_makeData returning «std-1.0.0-beta.12»::array::check_shuffle::test::CompoundStruct<>)(#_true, (9814: Field), (17221745184140693811: u64)), (#_makeData returning «std-1.0.0-beta.12»::array::check_shuffle::test::CompoundStruct<>)(#_false, (341: Field), (0: u64)));
  let rhs = (#_mkArray returning Array<«std-1.0.0-beta.12»::array::check_shuffle::test::CompoundStruct<>, 5: u32>)((#_makeData returning «std-1.0.0-beta.12»::array::check_shuffle::test::CompoundStruct<>)(#_false, (341: Field), (0: u64)), (#_makeData returning «std-1.0.0-beta.12»::array::check_shuffle::test::CompoundStruct<>)(#_false, (0: Field), (12345: u64)), (#_makeData returning «std-1.0.0-beta.12»::array::check_shuffle::test::CompoundStruct<>)(#_false, (-100: Field), (54321: u64)), (#_makeData returning «std-1.0.0-beta.12»::array::check_shuffle::test::CompoundStruct<>)(#_true, (9814: Field), (17221745184140693811: u64)), (#_makeData returning «std-1.0.0-beta.12»::array::check_shuffle::test::CompoundStruct<>)(#_true, (5: Field), (18446744073709551615: u64)));
  («std-1.0.0-beta.12»::array::check_shuffle::check_shuffle<«std-1.0.0-beta.12»::array::check_shuffle::test::CompoundStruct<>, 5: u32> as λ(Array<«std-1.0.0-beta.12»::array::check_shuffle::test::CompoundStruct<>, 5: u32>, Array<«std-1.0.0-beta.12»::array::check_shuffle::test::CompoundStruct<>, 5: u32>) -> Unit)(lhs, rhs);
  #_skip
}

def «std-1.0.0-beta.12».Array.CheckShuffle.env : Env := Env.mk
  [«std-1.0.0-beta.12::array::check_shuffle::__get_shuffle_indices», «std-1.0.0-beta.12::array::check_shuffle::__get_index», «std-1.0.0-beta.12::array::check_shuffle::check_shuffle», «std-1.0.0-beta.12::array::check_shuffle::test::test_shuffle», «std-1.0.0-beta.12::array::check_shuffle::test::test_shuffle_identity», «std-1.0.0-beta.12::array::check_shuffle::test::test_shuffle_fail», «std-1.0.0-beta.12::array::check_shuffle::test::test_shuffle_duplicates», «std-1.0.0-beta.12::array::check_shuffle::test::test_shuffle_compound_struct»]
  [«std-1.0.0-beta.12».impl_23]
