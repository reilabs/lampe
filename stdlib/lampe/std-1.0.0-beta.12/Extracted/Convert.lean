-- Generated by lampe

import «std-1.0.0-beta.12».Extracted.GeneratedTypes
import Lampe

open Lampe

noir_trait_impl[«std-1.0.0-beta.12».impl_40]<T: Type> «std-1.0.0-beta.12»::convert::From<T> for T where [] := {
  noir_def «from»<>(input: T) -> T := {
    input
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_41]<T: Type, U: Type> «std-1.0.0-beta.12»::convert::Into<T> for U where [T: «std-1.0.0-beta.12»::convert::From<U>] := {
  noir_def into<>(self: U) -> T := {
    ((T as «std-1.0.0-beta.12»::convert::From<U>)::«from»<> as λ(U) -> T)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_42]<> «std-1.0.0-beta.12»::convert::From<u8> for u16 where [] := {
  noir_def «from»<>(value: u8) -> u16 := {
    (#_cast returning u16)(value)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_43]<> «std-1.0.0-beta.12»::convert::From<u8> for u32 where [] := {
  noir_def «from»<>(value: u8) -> u32 := {
    (#_cast returning u32)(value)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_44]<> «std-1.0.0-beta.12»::convert::From<u16> for u32 where [] := {
  noir_def «from»<>(value: u16) -> u32 := {
    (#_cast returning u32)(value)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_45]<> «std-1.0.0-beta.12»::convert::From<u8> for u64 where [] := {
  noir_def «from»<>(value: u8) -> u64 := {
    (#_cast returning u64)(value)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_46]<> «std-1.0.0-beta.12»::convert::From<u16> for u64 where [] := {
  noir_def «from»<>(value: u16) -> u64 := {
    (#_cast returning u64)(value)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_47]<> «std-1.0.0-beta.12»::convert::From<u32> for u64 where [] := {
  noir_def «from»<>(value: u32) -> u64 := {
    (#_cast returning u64)(value)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_48]<> «std-1.0.0-beta.12»::convert::From<u8> for u128 where [] := {
  noir_def «from»<>(value: u8) -> u128 := {
    (#_cast returning u128)(value)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_49]<> «std-1.0.0-beta.12»::convert::From<u16> for u128 where [] := {
  noir_def «from»<>(value: u16) -> u128 := {
    (#_cast returning u128)(value)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_50]<> «std-1.0.0-beta.12»::convert::From<u32> for u128 where [] := {
  noir_def «from»<>(value: u32) -> u128 := {
    (#_cast returning u128)(value)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_51]<> «std-1.0.0-beta.12»::convert::From<u64> for u128 where [] := {
  noir_def «from»<>(value: u64) -> u128 := {
    (#_cast returning u128)(value)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_52]<> «std-1.0.0-beta.12»::convert::From<u8> for Field where [] := {
  noir_def «from»<>(value: u8) -> Field := {
    (#_cast returning Field)(value)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_53]<> «std-1.0.0-beta.12»::convert::From<u16> for Field where [] := {
  noir_def «from»<>(value: u16) -> Field := {
    (#_cast returning Field)(value)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_54]<> «std-1.0.0-beta.12»::convert::From<u32> for Field where [] := {
  noir_def «from»<>(value: u32) -> Field := {
    (#_cast returning Field)(value)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_55]<> «std-1.0.0-beta.12»::convert::From<u64> for Field where [] := {
  noir_def «from»<>(value: u64) -> Field := {
    (#_cast returning Field)(value)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_56]<> «std-1.0.0-beta.12»::convert::From<u128> for Field where [] := {
  noir_def «from»<>(value: u128) -> Field := {
    (#_cast returning Field)(value)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_57]<> «std-1.0.0-beta.12»::convert::From< i8> for i16 where [] := {
  noir_def «from»<>(value: i8) -> i16 := {
    (#_cast returning i16)(value)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_58]<> «std-1.0.0-beta.12»::convert::From< i8> for i32 where [] := {
  noir_def «from»<>(value: i8) -> i32 := {
    (#_cast returning i32)(value)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_59]<> «std-1.0.0-beta.12»::convert::From< i16> for i32 where [] := {
  noir_def «from»<>(value: i16) -> i32 := {
    (#_cast returning i32)(value)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_60]<> «std-1.0.0-beta.12»::convert::From< i8> for i64 where [] := {
  noir_def «from»<>(value: i8) -> i64 := {
    (#_cast returning i64)(value)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_61]<> «std-1.0.0-beta.12»::convert::From< i16> for i64 where [] := {
  noir_def «from»<>(value: i16) -> i64 := {
    (#_cast returning i64)(value)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_62]<> «std-1.0.0-beta.12»::convert::From< i32> for i64 where [] := {
  noir_def «from»<>(value: i32) -> i64 := {
    (#_cast returning i64)(value)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_63]<> «std-1.0.0-beta.12»::convert::From<bool> for u8 where [] := {
  noir_def «from»<>(value: bool) -> u8 := {
    (#_cast returning u8)(value)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_64]<> «std-1.0.0-beta.12»::convert::From<bool> for u16 where [] := {
  noir_def «from»<>(value: bool) -> u16 := {
    (#_cast returning u16)(value)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_65]<> «std-1.0.0-beta.12»::convert::From<bool> for u32 where [] := {
  noir_def «from»<>(value: bool) -> u32 := {
    (#_cast returning u32)(value)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_66]<> «std-1.0.0-beta.12»::convert::From<bool> for u64 where [] := {
  noir_def «from»<>(value: bool) -> u64 := {
    (#_cast returning u64)(value)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_67]<> «std-1.0.0-beta.12»::convert::From<bool> for u128 where [] := {
  noir_def «from»<>(value: bool) -> u128 := {
    (#_cast returning u128)(value)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_68]<> «std-1.0.0-beta.12»::convert::From<bool> for i8 where [] := {
  noir_def «from»<>(value: bool) -> i8 := {
    (#_cast returning i8)(value)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_69]<> «std-1.0.0-beta.12»::convert::From<bool> for i16 where [] := {
  noir_def «from»<>(value: bool) -> i16 := {
    (#_cast returning i16)(value)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_70]<> «std-1.0.0-beta.12»::convert::From<bool> for i32 where [] := {
  noir_def «from»<>(value: bool) -> i32 := {
    (#_cast returning i32)(value)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_71]<> «std-1.0.0-beta.12»::convert::From<bool> for i64 where [] := {
  noir_def «from»<>(value: bool) -> i64 := {
    (#_cast returning i64)(value)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_72]<> «std-1.0.0-beta.12»::convert::From<bool> for Field where [] := {
  noir_def «from»<>(value: bool) -> Field := {
    (#_cast returning Field)(value)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_327]<> «std-1.0.0-beta.12»::convert::AsPrimitive<u8> for bool where [] := {
  noir_def as_<>(self: bool) -> u8 := {
    (#_cast returning u8)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_377]<> «std-1.0.0-beta.12»::convert::AsPrimitive< i8> for bool where [] := {
  noir_def as_<>(self: bool) -> i8 := {
    (#_cast returning i8)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_347]<> «std-1.0.0-beta.12»::convert::AsPrimitive<u32> for bool where [] := {
  noir_def as_<>(self: bool) -> u32 := {
    (#_cast returning u32)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_397]<> «std-1.0.0-beta.12»::convert::AsPrimitive< i32> for bool where [] := {
  noir_def as_<>(self: bool) -> i32 := {
    (#_cast returning i32)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_317]<> «std-1.0.0-beta.12»::convert::AsPrimitive<bool> for bool where [] := {
  noir_def as_<>(self: bool) -> bool := {
    self
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_367]<> «std-1.0.0-beta.12»::convert::AsPrimitive<u128> for bool where [] := {
  noir_def as_<>(self: bool) -> u128 := {
    (#_cast returning u128)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_337]<> «std-1.0.0-beta.12»::convert::AsPrimitive<u16> for bool where [] := {
  noir_def as_<>(self: bool) -> u16 := {
    (#_cast returning u16)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_387]<> «std-1.0.0-beta.12»::convert::AsPrimitive< i16> for bool where [] := {
  noir_def as_<>(self: bool) -> i16 := {
    (#_cast returning i16)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_357]<> «std-1.0.0-beta.12»::convert::AsPrimitive<u64> for bool where [] := {
  noir_def as_<>(self: bool) -> u64 := {
    (#_cast returning u64)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_407]<> «std-1.0.0-beta.12»::convert::AsPrimitive< i64> for bool where [] := {
  noir_def as_<>(self: bool) -> i64 := {
    (#_cast returning i64)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_348]<> «std-1.0.0-beta.12»::convert::AsPrimitive<u32> for u8 where [] := {
  noir_def as_<>(self: u8) -> u32 := {
    (#_cast returning u32)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_398]<> «std-1.0.0-beta.12»::convert::AsPrimitive< i32> for u8 where [] := {
  noir_def as_<>(self: u8) -> i32 := {
    (#_cast returning i32)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_318]<> «std-1.0.0-beta.12»::convert::AsPrimitive<bool> for u8 where [] := {
  noir_def as_<>(self: u8) -> bool := {
    (#_uNeq returning bool)(self, (0: u8))
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_368]<> «std-1.0.0-beta.12»::convert::AsPrimitive<u128> for u8 where [] := {
  noir_def as_<>(self: u8) -> u128 := {
    (#_cast returning u128)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_338]<> «std-1.0.0-beta.12»::convert::AsPrimitive<u16> for u8 where [] := {
  noir_def as_<>(self: u8) -> u16 := {
    (#_cast returning u16)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_388]<> «std-1.0.0-beta.12»::convert::AsPrimitive< i16> for u8 where [] := {
  noir_def as_<>(self: u8) -> i16 := {
    (#_cast returning i16)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_358]<> «std-1.0.0-beta.12»::convert::AsPrimitive<u64> for u8 where [] := {
  noir_def as_<>(self: u8) -> u64 := {
    (#_cast returning u64)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_408]<> «std-1.0.0-beta.12»::convert::AsPrimitive< i64> for u8 where [] := {
  noir_def as_<>(self: u8) -> i64 := {
    (#_cast returning i64)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_328]<> «std-1.0.0-beta.12»::convert::AsPrimitive<u8> for u8 where [] := {
  noir_def as_<>(self: u8) -> u8 := {
    self
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_378]<> «std-1.0.0-beta.12»::convert::AsPrimitive< i8> for u8 where [] := {
  noir_def as_<>(self: u8) -> i8 := {
    (#_cast returning i8)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_349]<> «std-1.0.0-beta.12»::convert::AsPrimitive<u32> for u16 where [] := {
  noir_def as_<>(self: u16) -> u32 := {
    (#_cast returning u32)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_399]<> «std-1.0.0-beta.12»::convert::AsPrimitive< i32> for u16 where [] := {
  noir_def as_<>(self: u16) -> i32 := {
    (#_cast returning i32)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_319]<> «std-1.0.0-beta.12»::convert::AsPrimitive<bool> for u16 where [] := {
  noir_def as_<>(self: u16) -> bool := {
    (#_uNeq returning bool)(self, (0: u16))
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_369]<> «std-1.0.0-beta.12»::convert::AsPrimitive<u128> for u16 where [] := {
  noir_def as_<>(self: u16) -> u128 := {
    (#_cast returning u128)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_339]<> «std-1.0.0-beta.12»::convert::AsPrimitive<u16> for u16 where [] := {
  noir_def as_<>(self: u16) -> u16 := {
    self
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_389]<> «std-1.0.0-beta.12»::convert::AsPrimitive< i16> for u16 where [] := {
  noir_def as_<>(self: u16) -> i16 := {
    (#_cast returning i16)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_359]<> «std-1.0.0-beta.12»::convert::AsPrimitive<u64> for u16 where [] := {
  noir_def as_<>(self: u16) -> u64 := {
    (#_cast returning u64)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_409]<> «std-1.0.0-beta.12»::convert::AsPrimitive< i64> for u16 where [] := {
  noir_def as_<>(self: u16) -> i64 := {
    (#_cast returning i64)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_329]<> «std-1.0.0-beta.12»::convert::AsPrimitive<u8> for u16 where [] := {
  noir_def as_<>(self: u16) -> u8 := {
    (#_cast returning u8)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_379]<> «std-1.0.0-beta.12»::convert::AsPrimitive< i8> for u16 where [] := {
  noir_def as_<>(self: u16) -> i8 := {
    (#_cast returning i8)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_350]<> «std-1.0.0-beta.12»::convert::AsPrimitive<u32> for u32 where [] := {
  noir_def as_<>(self: u32) -> u32 := {
    self
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_400]<> «std-1.0.0-beta.12»::convert::AsPrimitive< i32> for u32 where [] := {
  noir_def as_<>(self: u32) -> i32 := {
    (#_cast returning i32)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_320]<> «std-1.0.0-beta.12»::convert::AsPrimitive<bool> for u32 where [] := {
  noir_def as_<>(self: u32) -> bool := {
    (#_uNeq returning bool)(self, (0: u32))
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_370]<> «std-1.0.0-beta.12»::convert::AsPrimitive<u128> for u32 where [] := {
  noir_def as_<>(self: u32) -> u128 := {
    (#_cast returning u128)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_340]<> «std-1.0.0-beta.12»::convert::AsPrimitive<u16> for u32 where [] := {
  noir_def as_<>(self: u32) -> u16 := {
    (#_cast returning u16)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_390]<> «std-1.0.0-beta.12»::convert::AsPrimitive< i16> for u32 where [] := {
  noir_def as_<>(self: u32) -> i16 := {
    (#_cast returning i16)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_360]<> «std-1.0.0-beta.12»::convert::AsPrimitive<u64> for u32 where [] := {
  noir_def as_<>(self: u32) -> u64 := {
    (#_cast returning u64)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_410]<> «std-1.0.0-beta.12»::convert::AsPrimitive< i64> for u32 where [] := {
  noir_def as_<>(self: u32) -> i64 := {
    (#_cast returning i64)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_330]<> «std-1.0.0-beta.12»::convert::AsPrimitive<u8> for u32 where [] := {
  noir_def as_<>(self: u32) -> u8 := {
    (#_cast returning u8)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_380]<> «std-1.0.0-beta.12»::convert::AsPrimitive< i8> for u32 where [] := {
  noir_def as_<>(self: u32) -> i8 := {
    (#_cast returning i8)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_351]<> «std-1.0.0-beta.12»::convert::AsPrimitive<u32> for u64 where [] := {
  noir_def as_<>(self: u64) -> u32 := {
    (#_cast returning u32)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_401]<> «std-1.0.0-beta.12»::convert::AsPrimitive< i32> for u64 where [] := {
  noir_def as_<>(self: u64) -> i32 := {
    (#_cast returning i32)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_321]<> «std-1.0.0-beta.12»::convert::AsPrimitive<bool> for u64 where [] := {
  noir_def as_<>(self: u64) -> bool := {
    (#_uNeq returning bool)(self, (0: u64))
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_371]<> «std-1.0.0-beta.12»::convert::AsPrimitive<u128> for u64 where [] := {
  noir_def as_<>(self: u64) -> u128 := {
    (#_cast returning u128)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_341]<> «std-1.0.0-beta.12»::convert::AsPrimitive<u16> for u64 where [] := {
  noir_def as_<>(self: u64) -> u16 := {
    (#_cast returning u16)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_391]<> «std-1.0.0-beta.12»::convert::AsPrimitive< i16> for u64 where [] := {
  noir_def as_<>(self: u64) -> i16 := {
    (#_cast returning i16)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_361]<> «std-1.0.0-beta.12»::convert::AsPrimitive<u64> for u64 where [] := {
  noir_def as_<>(self: u64) -> u64 := {
    self
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_411]<> «std-1.0.0-beta.12»::convert::AsPrimitive< i64> for u64 where [] := {
  noir_def as_<>(self: u64) -> i64 := {
    (#_cast returning i64)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_331]<> «std-1.0.0-beta.12»::convert::AsPrimitive<u8> for u64 where [] := {
  noir_def as_<>(self: u64) -> u8 := {
    (#_cast returning u8)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_381]<> «std-1.0.0-beta.12»::convert::AsPrimitive< i8> for u64 where [] := {
  noir_def as_<>(self: u64) -> i8 := {
    (#_cast returning i8)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_352]<> «std-1.0.0-beta.12»::convert::AsPrimitive<u32> for u128 where [] := {
  noir_def as_<>(self: u128) -> u32 := {
    (#_cast returning u32)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_402]<> «std-1.0.0-beta.12»::convert::AsPrimitive< i32> for u128 where [] := {
  noir_def as_<>(self: u128) -> i32 := {
    (#_cast returning i32)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_322]<> «std-1.0.0-beta.12»::convert::AsPrimitive<bool> for u128 where [] := {
  noir_def as_<>(self: u128) -> bool := {
    (#_uNeq returning bool)(self, (0: u128))
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_372]<> «std-1.0.0-beta.12»::convert::AsPrimitive<u128> for u128 where [] := {
  noir_def as_<>(self: u128) -> u128 := {
    self
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_342]<> «std-1.0.0-beta.12»::convert::AsPrimitive<u16> for u128 where [] := {
  noir_def as_<>(self: u128) -> u16 := {
    (#_cast returning u16)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_392]<> «std-1.0.0-beta.12»::convert::AsPrimitive< i16> for u128 where [] := {
  noir_def as_<>(self: u128) -> i16 := {
    (#_cast returning i16)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_362]<> «std-1.0.0-beta.12»::convert::AsPrimitive<u64> for u128 where [] := {
  noir_def as_<>(self: u128) -> u64 := {
    (#_cast returning u64)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_412]<> «std-1.0.0-beta.12»::convert::AsPrimitive< i64> for u128 where [] := {
  noir_def as_<>(self: u128) -> i64 := {
    (#_cast returning i64)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_332]<> «std-1.0.0-beta.12»::convert::AsPrimitive<u8> for u128 where [] := {
  noir_def as_<>(self: u128) -> u8 := {
    (#_cast returning u8)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_382]<> «std-1.0.0-beta.12»::convert::AsPrimitive< i8> for u128 where [] := {
  noir_def as_<>(self: u128) -> i8 := {
    (#_cast returning i8)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_323]<> «std-1.0.0-beta.12»::convert::AsPrimitive<bool> for i8 where [] := {
  noir_def as_<>(self: i8) -> bool := {
    (#_iNeq returning bool)(self, (0: i8))
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_373]<> «std-1.0.0-beta.12»::convert::AsPrimitive<u128> for i8 where [] := {
  noir_def as_<>(self: i8) -> u128 := {
    (#_cast returning u128)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_343]<> «std-1.0.0-beta.12»::convert::AsPrimitive<u16> for i8 where [] := {
  noir_def as_<>(self: i8) -> u16 := {
    (#_cast returning u16)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_393]<> «std-1.0.0-beta.12»::convert::AsPrimitive< i16> for i8 where [] := {
  noir_def as_<>(self: i8) -> i16 := {
    (#_cast returning i16)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_363]<> «std-1.0.0-beta.12»::convert::AsPrimitive<u64> for i8 where [] := {
  noir_def as_<>(self: i8) -> u64 := {
    (#_cast returning u64)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_413]<> «std-1.0.0-beta.12»::convert::AsPrimitive< i64> for i8 where [] := {
  noir_def as_<>(self: i8) -> i64 := {
    (#_cast returning i64)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_333]<> «std-1.0.0-beta.12»::convert::AsPrimitive<u8> for i8 where [] := {
  noir_def as_<>(self: i8) -> u8 := {
    (#_cast returning u8)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_383]<> «std-1.0.0-beta.12»::convert::AsPrimitive< i8> for i8 where [] := {
  noir_def as_<>(self: i8) -> i8 := {
    self
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_353]<> «std-1.0.0-beta.12»::convert::AsPrimitive<u32> for i8 where [] := {
  noir_def as_<>(self: i8) -> u32 := {
    (#_cast returning u32)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_403]<> «std-1.0.0-beta.12»::convert::AsPrimitive< i32> for i8 where [] := {
  noir_def as_<>(self: i8) -> i32 := {
    (#_cast returning i32)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_324]<> «std-1.0.0-beta.12»::convert::AsPrimitive<bool> for i16 where [] := {
  noir_def as_<>(self: i16) -> bool := {
    (#_iNeq returning bool)(self, (0: i16))
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_374]<> «std-1.0.0-beta.12»::convert::AsPrimitive<u128> for i16 where [] := {
  noir_def as_<>(self: i16) -> u128 := {
    (#_cast returning u128)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_344]<> «std-1.0.0-beta.12»::convert::AsPrimitive<u16> for i16 where [] := {
  noir_def as_<>(self: i16) -> u16 := {
    (#_cast returning u16)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_394]<> «std-1.0.0-beta.12»::convert::AsPrimitive< i16> for i16 where [] := {
  noir_def as_<>(self: i16) -> i16 := {
    self
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_364]<> «std-1.0.0-beta.12»::convert::AsPrimitive<u64> for i16 where [] := {
  noir_def as_<>(self: i16) -> u64 := {
    (#_cast returning u64)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_414]<> «std-1.0.0-beta.12»::convert::AsPrimitive< i64> for i16 where [] := {
  noir_def as_<>(self: i16) -> i64 := {
    (#_cast returning i64)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_334]<> «std-1.0.0-beta.12»::convert::AsPrimitive<u8> for i16 where [] := {
  noir_def as_<>(self: i16) -> u8 := {
    (#_cast returning u8)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_384]<> «std-1.0.0-beta.12»::convert::AsPrimitive< i8> for i16 where [] := {
  noir_def as_<>(self: i16) -> i8 := {
    (#_cast returning i8)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_354]<> «std-1.0.0-beta.12»::convert::AsPrimitive<u32> for i16 where [] := {
  noir_def as_<>(self: i16) -> u32 := {
    (#_cast returning u32)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_404]<> «std-1.0.0-beta.12»::convert::AsPrimitive< i32> for i16 where [] := {
  noir_def as_<>(self: i16) -> i32 := {
    (#_cast returning i32)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_325]<> «std-1.0.0-beta.12»::convert::AsPrimitive<bool> for i32 where [] := {
  noir_def as_<>(self: i32) -> bool := {
    (#_iNeq returning bool)(self, (0: i32))
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_375]<> «std-1.0.0-beta.12»::convert::AsPrimitive<u128> for i32 where [] := {
  noir_def as_<>(self: i32) -> u128 := {
    (#_cast returning u128)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_345]<> «std-1.0.0-beta.12»::convert::AsPrimitive<u16> for i32 where [] := {
  noir_def as_<>(self: i32) -> u16 := {
    (#_cast returning u16)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_395]<> «std-1.0.0-beta.12»::convert::AsPrimitive< i16> for i32 where [] := {
  noir_def as_<>(self: i32) -> i16 := {
    (#_cast returning i16)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_365]<> «std-1.0.0-beta.12»::convert::AsPrimitive<u64> for i32 where [] := {
  noir_def as_<>(self: i32) -> u64 := {
    (#_cast returning u64)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_415]<> «std-1.0.0-beta.12»::convert::AsPrimitive< i64> for i32 where [] := {
  noir_def as_<>(self: i32) -> i64 := {
    (#_cast returning i64)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_335]<> «std-1.0.0-beta.12»::convert::AsPrimitive<u8> for i32 where [] := {
  noir_def as_<>(self: i32) -> u8 := {
    (#_cast returning u8)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_385]<> «std-1.0.0-beta.12»::convert::AsPrimitive< i8> for i32 where [] := {
  noir_def as_<>(self: i32) -> i8 := {
    (#_cast returning i8)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_355]<> «std-1.0.0-beta.12»::convert::AsPrimitive<u32> for i32 where [] := {
  noir_def as_<>(self: i32) -> u32 := {
    (#_cast returning u32)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_405]<> «std-1.0.0-beta.12»::convert::AsPrimitive< i32> for i32 where [] := {
  noir_def as_<>(self: i32) -> i32 := {
    self
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_326]<> «std-1.0.0-beta.12»::convert::AsPrimitive<bool> for i64 where [] := {
  noir_def as_<>(self: i64) -> bool := {
    (#_iNeq returning bool)(self, (0: i64))
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_376]<> «std-1.0.0-beta.12»::convert::AsPrimitive<u128> for i64 where [] := {
  noir_def as_<>(self: i64) -> u128 := {
    (#_cast returning u128)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_346]<> «std-1.0.0-beta.12»::convert::AsPrimitive<u16> for i64 where [] := {
  noir_def as_<>(self: i64) -> u16 := {
    (#_cast returning u16)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_396]<> «std-1.0.0-beta.12»::convert::AsPrimitive< i16> for i64 where [] := {
  noir_def as_<>(self: i64) -> i16 := {
    (#_cast returning i16)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_366]<> «std-1.0.0-beta.12»::convert::AsPrimitive<u64> for i64 where [] := {
  noir_def as_<>(self: i64) -> u64 := {
    (#_cast returning u64)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_416]<> «std-1.0.0-beta.12»::convert::AsPrimitive< i64> for i64 where [] := {
  noir_def as_<>(self: i64) -> i64 := {
    self
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_336]<> «std-1.0.0-beta.12»::convert::AsPrimitive<u8> for i64 where [] := {
  noir_def as_<>(self: i64) -> u8 := {
    (#_cast returning u8)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_386]<> «std-1.0.0-beta.12»::convert::AsPrimitive< i8> for i64 where [] := {
  noir_def as_<>(self: i64) -> i8 := {
    (#_cast returning i8)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_356]<> «std-1.0.0-beta.12»::convert::AsPrimitive<u32> for i64 where [] := {
  noir_def as_<>(self: i64) -> u32 := {
    (#_cast returning u32)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_406]<> «std-1.0.0-beta.12»::convert::AsPrimitive< i32> for i64 where [] := {
  noir_def as_<>(self: i64) -> i32 := {
    (#_cast returning i32)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_417]<> «std-1.0.0-beta.12»::convert::AsPrimitive<Field> for bool where [] := {
  noir_def as_<>(self: bool) -> Field := {
    (#_cast returning Field)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_418]<> «std-1.0.0-beta.12»::convert::AsPrimitive<Field> for u8 where [] := {
  noir_def as_<>(self: u8) -> Field := {
    (#_cast returning Field)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_419]<> «std-1.0.0-beta.12»::convert::AsPrimitive<Field> for u16 where [] := {
  noir_def as_<>(self: u16) -> Field := {
    (#_cast returning Field)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_420]<> «std-1.0.0-beta.12»::convert::AsPrimitive<Field> for u32 where [] := {
  noir_def as_<>(self: u32) -> Field := {
    (#_cast returning Field)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_421]<> «std-1.0.0-beta.12»::convert::AsPrimitive<Field> for u64 where [] := {
  noir_def as_<>(self: u64) -> Field := {
    (#_cast returning Field)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_422]<> «std-1.0.0-beta.12»::convert::AsPrimitive<Field> for u128 where [] := {
  noir_def as_<>(self: u128) -> Field := {
    (#_cast returning Field)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_427]<> «std-1.0.0-beta.12»::convert::AsPrimitive<u64> for Field where [] := {
  noir_def as_<>(self: Field) -> u64 := {
    (#_cast returning u64)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_426]<> «std-1.0.0-beta.12»::convert::AsPrimitive<u32> for Field where [] := {
  noir_def as_<>(self: Field) -> u32 := {
    (#_cast returning u32)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_425]<> «std-1.0.0-beta.12»::convert::AsPrimitive<u16> for Field where [] := {
  noir_def as_<>(self: Field) -> u16 := {
    (#_cast returning u16)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_424]<> «std-1.0.0-beta.12»::convert::AsPrimitive<u8> for Field where [] := {
  noir_def as_<>(self: Field) -> u8 := {
    (#_cast returning u8)(self)
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_423]<> «std-1.0.0-beta.12»::convert::AsPrimitive<bool> for Field where [] := {
  noir_def as_<>(self: Field) -> bool := {
    (#_fNeq returning bool)(self, (0: Field))
  };
}

noir_trait_impl[«std-1.0.0-beta.12».impl_428]<> «std-1.0.0-beta.12»::convert::AsPrimitive<u128> for Field where [] := {
  noir_def as_<>(self: Field) -> u128 := {
    (#_cast returning u128)(self)
  };
}

def «std-1.0.0-beta.12».Convert.env : Env := Env.mk
  []
  [«std-1.0.0-beta.12».impl_40, «std-1.0.0-beta.12».impl_41, «std-1.0.0-beta.12».impl_42, «std-1.0.0-beta.12».impl_43, «std-1.0.0-beta.12».impl_44, «std-1.0.0-beta.12».impl_45, «std-1.0.0-beta.12».impl_46, «std-1.0.0-beta.12».impl_47, «std-1.0.0-beta.12».impl_48, «std-1.0.0-beta.12».impl_49, «std-1.0.0-beta.12».impl_50, «std-1.0.0-beta.12».impl_51, «std-1.0.0-beta.12».impl_52, «std-1.0.0-beta.12».impl_53, «std-1.0.0-beta.12».impl_54, «std-1.0.0-beta.12».impl_55, «std-1.0.0-beta.12».impl_56, «std-1.0.0-beta.12».impl_57, «std-1.0.0-beta.12».impl_58, «std-1.0.0-beta.12».impl_59, «std-1.0.0-beta.12».impl_60, «std-1.0.0-beta.12».impl_61, «std-1.0.0-beta.12».impl_62, «std-1.0.0-beta.12».impl_63, «std-1.0.0-beta.12».impl_64, «std-1.0.0-beta.12».impl_65, «std-1.0.0-beta.12».impl_66, «std-1.0.0-beta.12».impl_67, «std-1.0.0-beta.12».impl_68, «std-1.0.0-beta.12».impl_69, «std-1.0.0-beta.12».impl_70, «std-1.0.0-beta.12».impl_71, «std-1.0.0-beta.12».impl_72, «std-1.0.0-beta.12».impl_327, «std-1.0.0-beta.12».impl_377, «std-1.0.0-beta.12».impl_347, «std-1.0.0-beta.12».impl_397, «std-1.0.0-beta.12».impl_317, «std-1.0.0-beta.12».impl_367, «std-1.0.0-beta.12».impl_337, «std-1.0.0-beta.12».impl_387, «std-1.0.0-beta.12».impl_357, «std-1.0.0-beta.12».impl_407, «std-1.0.0-beta.12».impl_348, «std-1.0.0-beta.12».impl_398, «std-1.0.0-beta.12».impl_318, «std-1.0.0-beta.12».impl_368, «std-1.0.0-beta.12».impl_338, «std-1.0.0-beta.12».impl_388, «std-1.0.0-beta.12».impl_358, «std-1.0.0-beta.12».impl_408, «std-1.0.0-beta.12».impl_328, «std-1.0.0-beta.12».impl_378, «std-1.0.0-beta.12».impl_349, «std-1.0.0-beta.12».impl_399, «std-1.0.0-beta.12».impl_319, «std-1.0.0-beta.12».impl_369, «std-1.0.0-beta.12».impl_339, «std-1.0.0-beta.12».impl_389, «std-1.0.0-beta.12».impl_359, «std-1.0.0-beta.12».impl_409, «std-1.0.0-beta.12».impl_329, «std-1.0.0-beta.12».impl_379, «std-1.0.0-beta.12».impl_350, «std-1.0.0-beta.12».impl_400, «std-1.0.0-beta.12».impl_320, «std-1.0.0-beta.12».impl_370, «std-1.0.0-beta.12».impl_340, «std-1.0.0-beta.12».impl_390, «std-1.0.0-beta.12».impl_360, «std-1.0.0-beta.12».impl_410, «std-1.0.0-beta.12».impl_330, «std-1.0.0-beta.12».impl_380, «std-1.0.0-beta.12».impl_351, «std-1.0.0-beta.12».impl_401, «std-1.0.0-beta.12».impl_321, «std-1.0.0-beta.12».impl_371, «std-1.0.0-beta.12».impl_341, «std-1.0.0-beta.12».impl_391, «std-1.0.0-beta.12».impl_361, «std-1.0.0-beta.12».impl_411, «std-1.0.0-beta.12».impl_331, «std-1.0.0-beta.12».impl_381, «std-1.0.0-beta.12».impl_352, «std-1.0.0-beta.12».impl_402, «std-1.0.0-beta.12».impl_322, «std-1.0.0-beta.12».impl_372, «std-1.0.0-beta.12».impl_342, «std-1.0.0-beta.12».impl_392, «std-1.0.0-beta.12».impl_362, «std-1.0.0-beta.12».impl_412, «std-1.0.0-beta.12».impl_332, «std-1.0.0-beta.12».impl_382, «std-1.0.0-beta.12».impl_323, «std-1.0.0-beta.12».impl_373, «std-1.0.0-beta.12».impl_343, «std-1.0.0-beta.12».impl_393, «std-1.0.0-beta.12».impl_363, «std-1.0.0-beta.12».impl_413, «std-1.0.0-beta.12».impl_333, «std-1.0.0-beta.12».impl_383, «std-1.0.0-beta.12».impl_353, «std-1.0.0-beta.12».impl_403, «std-1.0.0-beta.12».impl_324, «std-1.0.0-beta.12».impl_374, «std-1.0.0-beta.12».impl_344, «std-1.0.0-beta.12».impl_394, «std-1.0.0-beta.12».impl_364, «std-1.0.0-beta.12».impl_414, «std-1.0.0-beta.12».impl_334, «std-1.0.0-beta.12».impl_384, «std-1.0.0-beta.12».impl_354, «std-1.0.0-beta.12».impl_404, «std-1.0.0-beta.12».impl_325, «std-1.0.0-beta.12».impl_375, «std-1.0.0-beta.12».impl_345, «std-1.0.0-beta.12».impl_395, «std-1.0.0-beta.12».impl_365, «std-1.0.0-beta.12».impl_415, «std-1.0.0-beta.12».impl_335, «std-1.0.0-beta.12».impl_385, «std-1.0.0-beta.12».impl_355, «std-1.0.0-beta.12».impl_405, «std-1.0.0-beta.12».impl_326, «std-1.0.0-beta.12».impl_376, «std-1.0.0-beta.12».impl_346, «std-1.0.0-beta.12».impl_396, «std-1.0.0-beta.12».impl_366, «std-1.0.0-beta.12».impl_416, «std-1.0.0-beta.12».impl_336, «std-1.0.0-beta.12».impl_386, «std-1.0.0-beta.12».impl_356, «std-1.0.0-beta.12».impl_406, «std-1.0.0-beta.12».impl_417, «std-1.0.0-beta.12».impl_418, «std-1.0.0-beta.12».impl_419, «std-1.0.0-beta.12».impl_420, «std-1.0.0-beta.12».impl_421, «std-1.0.0-beta.12».impl_422, «std-1.0.0-beta.12».impl_427, «std-1.0.0-beta.12».impl_426, «std-1.0.0-beta.12».impl_425, «std-1.0.0-beta.12».impl_424, «std-1.0.0-beta.12».impl_423, «std-1.0.0-beta.12».impl_428]
