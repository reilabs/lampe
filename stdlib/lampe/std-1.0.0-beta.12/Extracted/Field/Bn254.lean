-- Generated by lampe

import «std-1.0.0-beta.12».Extracted.GeneratedTypes
import Lampe

open Lampe

noir_global_def «std-1.0.0-beta.12»::field::bn254::PLO: Field = (53438638232309528389504892708671455233: Field);

noir_global_def «std-1.0.0-beta.12»::field::bn254::PHI: Field = (64323764613183177041862057485226039389: Field);

noir_global_def «std-1.0.0-beta.12»::field::bn254::TWO_POW_128: Field = (340282366920938463463374607431768211456: Field);

noir_def «std-1.0.0-beta.12»::field::bn254::compute_decomposition<>(x: Field) -> Tuple<Field, Field> := {
  let low = (#_cast returning Field)((#_cast returning u128)(x));
  let high = (#_fDiv returning Field)((#_fSub returning Field)(x, low), («std-1.0.0-beta.12»::field::bn254::TWO_POW_128<> as λ() -> Field)());
  (#_makeData returning Tuple<Field, Field>)(low, high)
}

noir_def «std-1.0.0-beta.12»::field::bn254::decompose_hint<>(x: Field) -> Tuple<Field, Field> := {
  (#_fresh returning Tuple<Field, Field>)()
}

noir_def «std-1.0.0-beta.12»::field::bn254::lte_hint<>(x: Field, y: Field) -> bool := {
  (#_fresh returning bool)()
}

noir_def «std-1.0.0-beta.12»::field::bn254::assert_gt_limbs<>(a: Tuple<Field, Field>, b: Tuple<Field, Field>) -> Unit := {
  let (alo, ahi) = a;
  let (blo, bhi) = b;
  {
    let borrow = («std-1.0.0-beta.12»::field::bn254::lte_hint<> as λ(Field, Field) -> bool)(alo, blo);
    let rlo = (#_fAdd returning Field)((#_fSub returning Field)((#_fSub returning Field)(alo, blo), (1: Field)), (#_fMul returning Field)((#_cast returning Field)(borrow), («std-1.0.0-beta.12»::field::bn254::TWO_POW_128<> as λ() -> Field)()));
    let rhi = (#_fSub returning Field)((#_fSub returning Field)(ahi, bhi), (#_cast returning Field)(borrow));
    («std-1.0.0-beta.12»::field::assert_max_bit_size<128: u32> as λ(Field) -> Unit)(rlo);
    («std-1.0.0-beta.12»::field::assert_max_bit_size<128: u32> as λ(Field) -> Unit)(rhi);
    #_skip
  }
}

noir_def «std-1.0.0-beta.12»::field::bn254::decompose<>(x: Field) -> Tuple<Field, Field> := {
  if (#_isUnconstrained returning bool)() then {
    («std-1.0.0-beta.12»::field::bn254::compute_decomposition<> as λ(Field) -> Tuple<Field, Field>)(x)
  } else {
    let (xlo, xhi) = («std-1.0.0-beta.12»::field::bn254::decompose_hint<> as λ(Field) -> Tuple<Field, Field>)(x);
    («std-1.0.0-beta.12»::field::assert_max_bit_size<128: u32> as λ(Field) -> Unit)(xlo);
    («std-1.0.0-beta.12»::field::assert_max_bit_size<128: u32> as λ(Field) -> Unit)(xhi);
    (#_assert returning Unit)((#_fEq returning bool)(x, (#_fAdd returning Field)(xlo, (#_fMul returning Field)((«std-1.0.0-beta.12»::field::bn254::TWO_POW_128<> as λ() -> Field)(), xhi))));
    («std-1.0.0-beta.12»::field::bn254::assert_gt_limbs<> as λ(Tuple<Field, Field>, Tuple<Field, Field>) -> Unit)((#_makeData returning Tuple<Field, Field>)((«std-1.0.0-beta.12»::field::bn254::PLO<> as λ() -> Field)(), («std-1.0.0-beta.12»::field::bn254::PHI<> as λ() -> Field)()), (#_makeData returning Tuple<Field, Field>)(xlo, xhi));
    (#_makeData returning Tuple<Field, Field>)(xlo, xhi)
  }
}

noir_def «std-1.0.0-beta.12»::field::bn254::assert_gt<>(a: Field, b: Field) -> Unit := {
  if (#_isUnconstrained returning bool)() then {
    (#_assert returning Unit)({
      («std-1.0.0-beta.12»::field::field_less_than<> as λ(Field, Field) -> bool)(b, a)
    });
    #_skip
  } else {
    let a_limbs = («std-1.0.0-beta.12»::field::bn254::decompose<> as λ(Field) -> Tuple<Field, Field>)(a);
    let b_limbs = («std-1.0.0-beta.12»::field::bn254::decompose<> as λ(Field) -> Tuple<Field, Field>)(b);
    («std-1.0.0-beta.12»::field::bn254::assert_gt_limbs<> as λ(Tuple<Field, Field>, Tuple<Field, Field>) -> Unit)(a_limbs, b_limbs)
  }
}

noir_def «std-1.0.0-beta.12»::field::bn254::assert_lt<>(a: Field, b: Field) -> Unit := {
  («std-1.0.0-beta.12»::field::bn254::assert_gt<> as λ(Field, Field) -> Unit)(b, a);
  #_skip
}

noir_def «std-1.0.0-beta.12»::field::bn254::gt<>(a: Field, b: Field) -> bool := {
  if (#_isUnconstrained returning bool)() then {
    («std-1.0.0-beta.12»::field::field_less_than<> as λ(Field, Field) -> bool)(b, a)
  } else if (#_fEq returning bool)(a, b) then {
    #_false
  } else {
    if («std-1.0.0-beta.12»::field::field_less_than<> as λ(Field, Field) -> bool)(a, b) then {
      («std-1.0.0-beta.12»::field::bn254::assert_gt<> as λ(Field, Field) -> Unit)(b, a);
      #_false
    } else {
      («std-1.0.0-beta.12»::field::bn254::assert_gt<> as λ(Field, Field) -> Unit)(a, b);
      #_true
    }
  }
}

noir_def «std-1.0.0-beta.12»::field::bn254::lt<>(a: Field, b: Field) -> bool := {
  («std-1.0.0-beta.12»::field::bn254::gt<> as λ(Field, Field) -> bool)(b, a)
}

noir_def «std-1.0.0-beta.12»::field::bn254::tests::check_decompose<>() -> Unit := {
  (#_assert returning Unit)(((Tuple<Field, Field> as «std-1.0.0-beta.12»::cmp::Eq<>)::eq<> as λ(Tuple<Field, Field>, Tuple<Field, Field>) -> bool)((«std-1.0.0-beta.12»::field::bn254::decompose<> as λ(Field) -> Tuple<Field, Field>)((«std-1.0.0-beta.12»::field::bn254::TWO_POW_128<> as λ() -> Field)()), (#_makeData returning Tuple<Field, Field>)((0: Field), (1: Field))));
  (#_assert returning Unit)(((Tuple<Field, Field> as «std-1.0.0-beta.12»::cmp::Eq<>)::eq<> as λ(Tuple<Field, Field>, Tuple<Field, Field>) -> bool)((«std-1.0.0-beta.12»::field::bn254::decompose<> as λ(Field) -> Tuple<Field, Field>)((#_fAdd returning Field)((«std-1.0.0-beta.12»::field::bn254::TWO_POW_128<> as λ() -> Field)(), (78187493520: Field))), (#_makeData returning Tuple<Field, Field>)((78187493520: Field), (1: Field))));
  (#_assert returning Unit)(((Tuple<Field, Field> as «std-1.0.0-beta.12»::cmp::Eq<>)::eq<> as λ(Tuple<Field, Field>, Tuple<Field, Field>) -> bool)((«std-1.0.0-beta.12»::field::bn254::decompose<> as λ(Field) -> Tuple<Field, Field>)((78187493520: Field)), (#_makeData returning Tuple<Field, Field>)((78187493520: Field), (0: Field))));
  #_skip
}

noir_def «std-1.0.0-beta.12»::field::bn254::tests::check_decompose_unconstrained<>() -> Unit := {
  (#_fresh returning Unit)()
}

noir_def «std-1.0.0-beta.12»::field::bn254::tests::check_lte_hint<>() -> Unit := {
  (#_fresh returning Unit)()
}

noir_def «std-1.0.0-beta.12»::field::bn254::tests::check_assert_gt<>() -> Unit := {
  («std-1.0.0-beta.12»::field::bn254::assert_gt<> as λ(Field, Field) -> Unit)((1: Field), (0: Field));
  («std-1.0.0-beta.12»::field::bn254::assert_gt<> as λ(Field, Field) -> Unit)((256: Field), (0: Field));
  («std-1.0.0-beta.12»::field::bn254::assert_gt<> as λ(Field, Field) -> Unit)((#_fSub returning Field)((0: Field), (1: Field)), (#_fSub returning Field)((0: Field), (2: Field)));
  («std-1.0.0-beta.12»::field::bn254::assert_gt<> as λ(Field, Field) -> Unit)((«std-1.0.0-beta.12»::field::bn254::TWO_POW_128<> as λ() -> Field)(), (0: Field));
  («std-1.0.0-beta.12»::field::bn254::assert_gt<> as λ(Field, Field) -> Unit)((#_fSub returning Field)((0: Field), (1: Field)), (0: Field));
  #_skip
}

noir_def «std-1.0.0-beta.12»::field::bn254::tests::check_assert_gt_unconstrained<>() -> Unit := {
  (#_fresh returning Unit)()
}

noir_def «std-1.0.0-beta.12»::field::bn254::tests::check_gt<>() -> Unit := {
  (#_assert returning Unit)((«std-1.0.0-beta.12»::field::bn254::gt<> as λ(Field, Field) -> bool)((1: Field), (0: Field)));
  (#_assert returning Unit)((«std-1.0.0-beta.12»::field::bn254::gt<> as λ(Field, Field) -> bool)((256: Field), (0: Field)));
  (#_assert returning Unit)((«std-1.0.0-beta.12»::field::bn254::gt<> as λ(Field, Field) -> bool)((#_fSub returning Field)((0: Field), (1: Field)), (#_fSub returning Field)((0: Field), (2: Field))));
  (#_assert returning Unit)((«std-1.0.0-beta.12»::field::bn254::gt<> as λ(Field, Field) -> bool)((«std-1.0.0-beta.12»::field::bn254::TWO_POW_128<> as λ() -> Field)(), (0: Field)));
  (#_assert returning Unit)((#_bNot returning bool)((«std-1.0.0-beta.12»::field::bn254::gt<> as λ(Field, Field) -> bool)((0: Field), (0: Field))));
  (#_assert returning Unit)((#_bNot returning bool)((«std-1.0.0-beta.12»::field::bn254::gt<> as λ(Field, Field) -> bool)((0: Field), (256: Field))));
  (#_assert returning Unit)((«std-1.0.0-beta.12»::field::bn254::gt<> as λ(Field, Field) -> bool)((#_fSub returning Field)((0: Field), (1: Field)), (#_fSub returning Field)((0: Field), (2: Field))));
  (#_assert returning Unit)((#_bNot returning bool)((«std-1.0.0-beta.12»::field::bn254::gt<> as λ(Field, Field) -> bool)((#_fSub returning Field)((0: Field), (2: Field)), (#_fSub returning Field)((0: Field), (1: Field)))));
  #_skip
}

noir_def «std-1.0.0-beta.12»::field::bn254::tests::check_gt_unconstrained<>() -> Unit := {
  (#_fresh returning Unit)()
}

noir_def «std-1.0.0-beta.12»::field::bn254::tests::check_plo_phi<>() -> Unit := {
  (#_assert returning Unit)((#_fEq returning bool)((#_fAdd returning Field)((«std-1.0.0-beta.12»::field::bn254::PLO<> as λ() -> Field)(), (#_fMul returning Field)((«std-1.0.0-beta.12»::field::bn254::PHI<> as λ() -> Field)(), («std-1.0.0-beta.12»::field::bn254::TWO_POW_128<> as λ() -> Field)())), (0: Field)));
  let p_bytes = (#_modulusLeBytes returning Slice<u8>)();
  let mut p_low = (0: Field);
  let mut p_high = (0: Field);
  let mut offset = (1: Field);
  for i in (0: u32) .. (16: u32) do {
    p_low = (#_fAdd returning Field)(p_low, (#_fMul returning Field)((#_cast returning Field)((#_sliceIndex returning u8)(p_bytes, (#_cast returning u32)(i))), offset));
    p_high = (#_fAdd returning Field)(p_high, (#_fMul returning Field)((#_cast returning Field)((#_sliceIndex returning u8)(p_bytes, (#_cast returning u32)((#_uAdd returning u32)(i, (16: u32))))), offset));
    offset = (#_fMul returning Field)(offset, (256: Field));
    #_skip
  };
  (#_assert returning Unit)((#_fEq returning bool)(p_low, («std-1.0.0-beta.12»::field::bn254::PLO<> as λ() -> Field)()));
  (#_assert returning Unit)((#_fEq returning bool)(p_high, («std-1.0.0-beta.12»::field::bn254::PHI<> as λ() -> Field)()));
  #_skip
}

def «std-1.0.0-beta.12».Field.Bn254.env : Env := Env.mk
  [«std-1.0.0-beta.12::field::bn254::PLO», «std-1.0.0-beta.12::field::bn254::PHI», «std-1.0.0-beta.12::field::bn254::TWO_POW_128», «std-1.0.0-beta.12::field::bn254::compute_decomposition», «std-1.0.0-beta.12::field::bn254::decompose_hint», «std-1.0.0-beta.12::field::bn254::lte_hint», «std-1.0.0-beta.12::field::bn254::assert_gt_limbs», «std-1.0.0-beta.12::field::bn254::decompose», «std-1.0.0-beta.12::field::bn254::assert_gt», «std-1.0.0-beta.12::field::bn254::assert_lt», «std-1.0.0-beta.12::field::bn254::gt», «std-1.0.0-beta.12::field::bn254::lt», «std-1.0.0-beta.12::field::bn254::tests::check_decompose», «std-1.0.0-beta.12::field::bn254::tests::check_decompose_unconstrained», «std-1.0.0-beta.12::field::bn254::tests::check_lte_hint», «std-1.0.0-beta.12::field::bn254::tests::check_assert_gt», «std-1.0.0-beta.12::field::bn254::tests::check_assert_gt_unconstrained», «std-1.0.0-beta.12::field::bn254::tests::check_gt», «std-1.0.0-beta.12::field::bn254::tests::check_gt_unconstrained», «std-1.0.0-beta.12::field::bn254::tests::check_plo_phi»]
  []
