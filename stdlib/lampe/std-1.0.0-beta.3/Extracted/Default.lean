-- Generated by lampe

import «std-1.0.0-beta.3».Extracted.GeneratedTypes
import Lampe

open Lampe

namespace «std-1.0.0-beta.3»
namespace Extracted

noir_trait_impl[impl_261]<> std::default::Default<> for Field where [] := {
  noir_def default<>() -> Field := {
    (0: Field)
  };
}

noir_trait_impl[impl_262]<> std::default::Default<> for u1 where [] := {
  noir_def default<>() -> u1 := {
    (0: u1)
  };
}

noir_trait_impl[impl_263]<> std::default::Default<> for u8 where [] := {
  noir_def default<>() -> u8 := {
    (0: u8)
  };
}

noir_trait_impl[impl_264]<> std::default::Default<> for u16 where [] := {
  noir_def default<>() -> u16 := {
    (0: u16)
  };
}

noir_trait_impl[impl_265]<> std::default::Default<> for u32 where [] := {
  noir_def default<>() -> u32 := {
    (0: u32)
  };
}

noir_trait_impl[impl_266]<> std::default::Default<> for u64 where [] := {
  noir_def default<>() -> u64 := {
    (0: u64)
  };
}

noir_trait_impl[impl_267]<> std::default::Default<> for u128 where [] := {
  noir_def default<>() -> u128 := {
    (0: u128)
  };
}

noir_trait_impl[impl_268]<> std::default::Default<> for i8 where [] := {
  noir_def default<>() -> i8 := {
    (0: i8)
  };
}

noir_trait_impl[impl_269]<> std::default::Default<> for i16 where [] := {
  noir_def default<>() -> i16 := {
    (0: i16)
  };
}

noir_trait_impl[impl_270]<> std::default::Default<> for i32 where [] := {
  noir_def default<>() -> i32 := {
    (0: i32)
  };
}

noir_trait_impl[impl_271]<> std::default::Default<> for i64 where [] := {
  noir_def default<>() -> i64 := {
    (0: i64)
  };
}

noir_trait_impl[impl_272]<> std::default::Default<> for Unit where [] := {
  noir_def default<>() -> Unit := {
    #_unit
  };
}

noir_trait_impl[impl_273]<> std::default::Default<> for bool where [] := {
  noir_def default<>() -> bool := {
    #_false
  };
}

noir_trait_impl[impl_274]<N: u32, T: Type> std::default::Default<> for Array<T, N: u32> where [T: std::default::Default<>] := {
  noir_def default<>() -> Array<T, N: u32> := {
    (#_mkRepeatedArray returning Array<T, N: u32>)(((T as std::default::Default<>)::default<> as λ() -> T)())
  };
}

noir_trait_impl[impl_275]<T: Type> std::default::Default<> for Slice<T> where [] := {
  noir_def default<>() -> Slice<T> := {
    (#_mkSlice returning Slice<T>)()
  };
}

noir_trait_impl[impl_276]<A: Type, B: Type> std::default::Default<> for Tuple<A, B> where [A: std::default::Default<>, B: std::default::Default<>] := {
  noir_def default<>() -> Tuple<A, B> := {
    (#_makeData returning Tuple<A, B>)(((A as std::default::Default<>)::default<> as λ() -> A)(), ((B as std::default::Default<>)::default<> as λ() -> B)())
  };
}

noir_trait_impl[impl_277]<A: Type, B: Type, C: Type> std::default::Default<> for Tuple<A, B, C> where [A: std::default::Default<>, B: std::default::Default<>, C: std::default::Default<>] := {
  noir_def default<>() -> Tuple<A, B, C> := {
    (#_makeData returning Tuple<A, B, C>)(((A as std::default::Default<>)::default<> as λ() -> A)(), ((B as std::default::Default<>)::default<> as λ() -> B)(), ((C as std::default::Default<>)::default<> as λ() -> C)())
  };
}

noir_trait_impl[impl_278]<A: Type, B: Type, C: Type, D: Type> std::default::Default<> for Tuple<A, B, C, D> where [A: std::default::Default<>, B: std::default::Default<>, C: std::default::Default<>, D: std::default::Default<>] := {
  noir_def default<>() -> Tuple<A, B, C, D> := {
    (#_makeData returning Tuple<A, B, C, D>)(((A as std::default::Default<>)::default<> as λ() -> A)(), ((B as std::default::Default<>)::default<> as λ() -> B)(), ((C as std::default::Default<>)::default<> as λ() -> C)(), ((D as std::default::Default<>)::default<> as λ() -> D)())
  };
}

noir_trait_impl[impl_279]<A: Type, B: Type, C: Type, D: Type, E: Type> std::default::Default<> for Tuple<A, B, C, D, E> where [A: std::default::Default<>, B: std::default::Default<>, C: std::default::Default<>, D: std::default::Default<>, E: std::default::Default<>] := {
  noir_def default<>() -> Tuple<A, B, C, D, E> := {
    (#_makeData returning Tuple<A, B, C, D, E>)(((A as std::default::Default<>)::default<> as λ() -> A)(), ((B as std::default::Default<>)::default<> as λ() -> B)(), ((C as std::default::Default<>)::default<> as λ() -> C)(), ((D as std::default::Default<>)::default<> as λ() -> D)(), ((E as std::default::Default<>)::default<> as λ() -> E)())
  };
}


def Default.env : Env := Env.mk
  []
  [impl_261, impl_262, impl_263, impl_264, impl_265, impl_266, impl_267, impl_268, impl_269, impl_270, impl_271, impl_272, impl_273, impl_274, impl_275, impl_276, impl_277, impl_278, impl_279]
