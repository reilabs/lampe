-- Generated by lampe

import «std-0.0.0».Extracted.GeneratedTypes
import Lampe

open Lampe

namespace «std-0.0.0»
namespace Extracted

nr_trait_impl[impl_67] <> std::cmp::Eq<  > for Field where  {
    fn «eq»<> (self : Field, other : Field) -> bool {
        #fEq(self, other) : bool;
}
}

nr_trait_impl[impl_68] <> std::cmp::Eq<  > for u128 where  {
    fn «eq»<> (self : u128, other : u128) -> bool {
        #uEq(self, other) : bool;
}
}

nr_trait_impl[impl_69] <> std::cmp::Eq<  > for u64 where  {
    fn «eq»<> (self : u64, other : u64) -> bool {
        #uEq(self, other) : bool;
}
}

nr_trait_impl[impl_70] <> std::cmp::Eq<  > for u32 where  {
    fn «eq»<> (self : u32, other : u32) -> bool {
        #uEq(self, other) : bool;
}
}

nr_trait_impl[impl_71] <> std::cmp::Eq<  > for u16 where  {
    fn «eq»<> (self : u16, other : u16) -> bool {
        #uEq(self, other) : bool;
}
}

nr_trait_impl[impl_72] <> std::cmp::Eq<  > for u8 where  {
    fn «eq»<> (self : u8, other : u8) -> bool {
        #uEq(self, other) : bool;
}
}

nr_trait_impl[impl_73] <> std::cmp::Eq<  > for u1 where  {
    fn «eq»<> (self : u1, other : u1) -> bool {
        #uEq(self, other) : bool;
}
}

nr_trait_impl[impl_74] <> std::cmp::Eq<  > for i8 where  {
    fn «eq»<> (self : i8, other : i8) -> bool {
        #iEq(self, other) : bool;
}
}

nr_trait_impl[impl_75] <> std::cmp::Eq<  > for i16 where  {
    fn «eq»<> (self : i16, other : i16) -> bool {
        #iEq(self, other) : bool;
}
}

nr_trait_impl[impl_76] <> std::cmp::Eq<  > for i32 where  {
    fn «eq»<> (self : i32, other : i32) -> bool {
        #iEq(self, other) : bool;
}
}

nr_trait_impl[impl_77] <> std::cmp::Eq<  > for i64 where  {
    fn «eq»<> (self : i64, other : i64) -> bool {
        #iEq(self, other) : bool;
}
}

nr_trait_impl[impl_78] <> std::cmp::Eq<  > for Unit where  {
    fn «eq»<> (_self : Unit, _other : Unit) -> bool {
        true;
}
}

nr_trait_impl[impl_79] <> std::cmp::Eq<  > for bool where  {
    fn «eq»<> (self : bool, other : bool) -> bool {
        #bEq(self, other) : bool;
}
}

nr_trait_impl[impl_80] <N> std::cmp::Eq<  > for [T; N] where T : Eq<> {
    fn «eq»<> (self : [T; N], other : [T; N]) -> bool {
        let mut result = true;
        for i in 0 : u32 .. #arrayLen(self) : u32 {
                    result = #bAnd(result, ((T as std::cmp::Eq<  >)::eq<  > as λ(T, T) → bool)(#arrayIndex(self, #cast(i) : u32) : T, #arrayIndex(other, #cast(i) : u32) : T)) : bool;
                skip;
        };
        result;
}
}

nr_trait_impl[impl_81] <T> std::cmp::Eq<  > for [T] where T : Eq<> {
    fn «eq»<> (self : [T], other : [T]) -> bool {
        let mut result = #uEq(#sliceLen(self) : u32, #sliceLen(other) : u32) : bool;
        for i in 0 : u32 .. #sliceLen(self) : u32 {
                    result = #bAnd(result, ((T as std::cmp::Eq<  >)::eq<  > as λ(T, T) → bool)(#sliceIndex(self, #cast(i) : u32) : T, #sliceIndex(other, #cast(i) : u32) : T)) : bool;
                skip;
        };
        result;
}
}

nr_trait_impl[impl_82] <> std::cmp::Eq<  > for str<N> where  {
    fn «eq»<> (self : str<N>, other : str<N>) -> bool {
        let self_bytes = (@str::as_bytes< N:u32 > as λ(str<N>) → [u8; N])(self);
        let other_bytes = (@str::as_bytes< N:u32 > as λ(str<N>) → [u8; N])(other);
        #arrayEq(self_bytes, other_bytes) : bool;
}
}

nr_trait_impl[impl_83] <B, A> std::cmp::Eq<  > for `(A, B) where A : Eq<>, B : Eq<> {
    fn «eq»<> (self : `(A, B), other : `(A, B)) -> bool {
        #bAnd(((A as std::cmp::Eq<  >)::eq<  > as λ(A, A) → bool)(self.0, other.0), ((B as std::cmp::Eq<  >)::eq<  > as λ(B, B) → bool)(self.1, other.1)) : bool;
}
}

nr_trait_impl[impl_84] <B, A, C> std::cmp::Eq<  > for `(A, B, C) where A : Eq<>, B : Eq<>, C : Eq<> {
    fn «eq»<> (self : `(A, B, C), other : `(A, B, C)) -> bool {
        #bAnd(#bAnd(((A as std::cmp::Eq<  >)::eq<  > as λ(A, A) → bool)(self.0, other.0), ((B as std::cmp::Eq<  >)::eq<  > as λ(B, B) → bool)(self.1, other.1)) : bool, ((C as std::cmp::Eq<  >)::eq<  > as λ(C, C) → bool)(self.2, other.2)) : bool;
}
}

nr_trait_impl[impl_85] <D, A, B, C> std::cmp::Eq<  > for `(A, B, C, D) where A : Eq<>, B : Eq<>, C : Eq<>, D : Eq<> {
    fn «eq»<> (self : `(A, B, C, D), other : `(A, B, C, D)) -> bool {
        #bAnd(#bAnd(#bAnd(((A as std::cmp::Eq<  >)::eq<  > as λ(A, A) → bool)(self.0, other.0), ((B as std::cmp::Eq<  >)::eq<  > as λ(B, B) → bool)(self.1, other.1)) : bool, ((C as std::cmp::Eq<  >)::eq<  > as λ(C, C) → bool)(self.2, other.2)) : bool, ((D as std::cmp::Eq<  >)::eq<  > as λ(D, D) → bool)(self.3, other.3)) : bool;
}
}

nr_trait_impl[impl_86] <B, D, E, A, C> std::cmp::Eq<  > for `(A, B, C, D, E) where A : Eq<>, B : Eq<>, C : Eq<>, D : Eq<>, E : Eq<> {
    fn «eq»<> (self : `(A, B, C, D, E), other : `(A, B, C, D, E)) -> bool {
        #bAnd(#bAnd(#bAnd(#bAnd(((A as std::cmp::Eq<  >)::eq<  > as λ(A, A) → bool)(self.0, other.0), ((B as std::cmp::Eq<  >)::eq<  > as λ(B, B) → bool)(self.1, other.1)) : bool, ((C as std::cmp::Eq<  >)::eq<  > as λ(C, C) → bool)(self.2, other.2)) : bool, ((D as std::cmp::Eq<  >)::eq<  > as λ(D, D) → bool)(self.3, other.3)) : bool, ((E as std::cmp::Eq<  >)::eq<  > as λ(E, E) → bool)(self.4, other.4)) : bool;
}
}

nr_trait_impl[impl_87] <> std::cmp::Eq<  > for cmp::Ordering<  > where  {
    fn «eq»<> (self : cmp::Ordering<  >, other : cmp::Ordering<  >) -> bool {
        #fEq((self as cmp::Ordering<  >).result, (other as cmp::Ordering<  >).result) : bool;
}
}

nr_def «cmp»::«Ordering»::«less»<>() -> cmp::Ordering<  > {
    cmp::Ordering<  > { 0 : Field };
}

nr_def «cmp»::«Ordering»::«equal»<>() -> cmp::Ordering<  > {
    cmp::Ordering<  > { 1 : Field };
}

nr_def «cmp»::«Ordering»::«greater»<>() -> cmp::Ordering<  > {
    cmp::Ordering<  > { 2 : Field };
}

nr_trait_impl[impl_88] <> std::cmp::Ord<  > for u128 where  {
    fn «cmp»<> (self : u128, other : u128) -> cmp::Ordering<  > {
        if #uLt(self, other) : bool {
                    (@cmp::Ordering::less<  > as λ() → cmp::Ordering<  >)();
        } else {
            if #uGt(self, other) : bool {
                    (@cmp::Ordering::greater<  > as λ() → cmp::Ordering<  >)();
        } else {
                    (@cmp::Ordering::equal<  > as λ() → cmp::Ordering<  >)();
        }
        };
}
}

nr_trait_impl[impl_89] <> std::cmp::Ord<  > for u64 where  {
    fn «cmp»<> (self : u64, other : u64) -> cmp::Ordering<  > {
        if #uLt(self, other) : bool {
                    (@cmp::Ordering::less<  > as λ() → cmp::Ordering<  >)();
        } else {
            if #uGt(self, other) : bool {
                    (@cmp::Ordering::greater<  > as λ() → cmp::Ordering<  >)();
        } else {
                    (@cmp::Ordering::equal<  > as λ() → cmp::Ordering<  >)();
        }
        };
}
}

nr_trait_impl[impl_90] <> std::cmp::Ord<  > for u32 where  {
    fn «cmp»<> (self : u32, other : u32) -> cmp::Ordering<  > {
        if #uLt(self, other) : bool {
                    (@cmp::Ordering::less<  > as λ() → cmp::Ordering<  >)();
        } else {
            if #uGt(self, other) : bool {
                    (@cmp::Ordering::greater<  > as λ() → cmp::Ordering<  >)();
        } else {
                    (@cmp::Ordering::equal<  > as λ() → cmp::Ordering<  >)();
        }
        };
}
}

nr_trait_impl[impl_91] <> std::cmp::Ord<  > for u16 where  {
    fn «cmp»<> (self : u16, other : u16) -> cmp::Ordering<  > {
        if #uLt(self, other) : bool {
                    (@cmp::Ordering::less<  > as λ() → cmp::Ordering<  >)();
        } else {
            if #uGt(self, other) : bool {
                    (@cmp::Ordering::greater<  > as λ() → cmp::Ordering<  >)();
        } else {
                    (@cmp::Ordering::equal<  > as λ() → cmp::Ordering<  >)();
        }
        };
}
}

nr_trait_impl[impl_92] <> std::cmp::Ord<  > for u8 where  {
    fn «cmp»<> (self : u8, other : u8) -> cmp::Ordering<  > {
        if #uLt(self, other) : bool {
                    (@cmp::Ordering::less<  > as λ() → cmp::Ordering<  >)();
        } else {
            if #uGt(self, other) : bool {
                    (@cmp::Ordering::greater<  > as λ() → cmp::Ordering<  >)();
        } else {
                    (@cmp::Ordering::equal<  > as λ() → cmp::Ordering<  >)();
        }
        };
}
}

nr_trait_impl[impl_93] <> std::cmp::Ord<  > for i8 where  {
    fn «cmp»<> (self : i8, other : i8) -> cmp::Ordering<  > {
        if #iLt(self, other) : bool {
                    (@cmp::Ordering::less<  > as λ() → cmp::Ordering<  >)();
        } else {
            if #iGt(self, other) : bool {
                    (@cmp::Ordering::greater<  > as λ() → cmp::Ordering<  >)();
        } else {
                    (@cmp::Ordering::equal<  > as λ() → cmp::Ordering<  >)();
        }
        };
}
}

nr_trait_impl[impl_94] <> std::cmp::Ord<  > for i16 where  {
    fn «cmp»<> (self : i16, other : i16) -> cmp::Ordering<  > {
        if #iLt(self, other) : bool {
                    (@cmp::Ordering::less<  > as λ() → cmp::Ordering<  >)();
        } else {
            if #iGt(self, other) : bool {
                    (@cmp::Ordering::greater<  > as λ() → cmp::Ordering<  >)();
        } else {
                    (@cmp::Ordering::equal<  > as λ() → cmp::Ordering<  >)();
        }
        };
}
}

nr_trait_impl[impl_95] <> std::cmp::Ord<  > for i32 where  {
    fn «cmp»<> (self : i32, other : i32) -> cmp::Ordering<  > {
        if #iLt(self, other) : bool {
                    (@cmp::Ordering::less<  > as λ() → cmp::Ordering<  >)();
        } else {
            if #iGt(self, other) : bool {
                    (@cmp::Ordering::greater<  > as λ() → cmp::Ordering<  >)();
        } else {
                    (@cmp::Ordering::equal<  > as λ() → cmp::Ordering<  >)();
        }
        };
}
}

nr_trait_impl[impl_96] <> std::cmp::Ord<  > for i64 where  {
    fn «cmp»<> (self : i64, other : i64) -> cmp::Ordering<  > {
        if #iLt(self, other) : bool {
                    (@cmp::Ordering::less<  > as λ() → cmp::Ordering<  >)();
        } else {
            if #iGt(self, other) : bool {
                    (@cmp::Ordering::greater<  > as λ() → cmp::Ordering<  >)();
        } else {
                    (@cmp::Ordering::equal<  > as λ() → cmp::Ordering<  >)();
        }
        };
}
}

nr_trait_impl[impl_97] <> std::cmp::Ord<  > for Unit where  {
    fn «cmp»<> (_self : Unit, _other : Unit) -> cmp::Ordering<  > {
        (@cmp::Ordering::equal<  > as λ() → cmp::Ordering<  >)();
}
}

nr_trait_impl[impl_98] <> std::cmp::Ord<  > for bool where  {
    fn «cmp»<> (self : bool, other : bool) -> cmp::Ordering<  > {
        if self {
                    if other {
                            (@cmp::Ordering::equal<  > as λ() → cmp::Ordering<  >)();
                } else {
                            (@cmp::Ordering::greater<  > as λ() → cmp::Ordering<  >)();
                };
        } else {
            if other {
                    (@cmp::Ordering::less<  > as λ() → cmp::Ordering<  >)();
        } else {
                    (@cmp::Ordering::equal<  > as λ() → cmp::Ordering<  >)();
        }
        };
}
}

nr_trait_impl[impl_99] <N> std::cmp::Ord<  > for [T; N] where T : Ord<> {
    fn «cmp»<> (self : [T; N], other : [T; N]) -> cmp::Ordering<  > {
        let mut result = (@cmp::Ordering::equal<  > as λ() → cmp::Ordering<  >)();
        for i in 0 : u32 .. #arrayLen(self) : u32 {
                    if ((cmp::Ordering<  > as Eq<  >)::eq<  > as λ(cmp::Ordering<  >, cmp::Ordering<  >) → bool)(result, (@cmp::Ordering::equal<  > as λ() → cmp::Ordering<  >)()) {
                            result = ((T as std::cmp::Ord<  >)::cmp<  > as λ(T, T) → cmp::Ordering<  >)(#arrayIndex(self, #cast(i) : u32) : T, #arrayIndex(other, #cast(i) : u32) : T);
                        skip;
                };
        };
        result;
}
}

nr_trait_impl[impl_100] <T> std::cmp::Ord<  > for [T] where T : Ord<> {
    fn «cmp»<> (self : [T], other : [T]) -> cmp::Ordering<  > {
        let mut result = ((u32 as std::cmp::Ord<  >)::cmp<  > as λ(u32, u32) → cmp::Ordering<  >)(#sliceLen(self) : u32, #sliceLen(other) : u32);
        for i in 0 : u32 .. #sliceLen(self) : u32 {
                    if ((cmp::Ordering<  > as Eq<  >)::eq<  > as λ(cmp::Ordering<  >, cmp::Ordering<  >) → bool)(result, (@cmp::Ordering::equal<  > as λ() → cmp::Ordering<  >)()) {
                            result = ((T as std::cmp::Ord<  >)::cmp<  > as λ(T, T) → cmp::Ordering<  >)(#sliceIndex(self, #cast(i) : u32) : T, #sliceIndex(other, #cast(i) : u32) : T);
                        skip;
                };
        };
        result;
}
}

nr_trait_impl[impl_101] <B, A> std::cmp::Ord<  > for `(A, B) where A : Ord<>, B : Ord<> {
    fn «cmp»<> (self : `(A, B), other : `(A, B)) -> cmp::Ordering<  > {
        let result = ((A as std::cmp::Ord<  >)::cmp<  > as λ(A, A) → cmp::Ordering<  >)(self.0, other.0);
        if ((cmp::Ordering<  > as Eq<  >)::eq<  > as λ(cmp::Ordering<  >, cmp::Ordering<  >) → bool)(result, (@cmp::Ordering::equal<  > as λ() → cmp::Ordering<  >)()) {
                    result;
        } else {
                    ((B as std::cmp::Ord<  >)::cmp<  > as λ(B, B) → cmp::Ordering<  >)(self.1, other.1);
        };
}
}

nr_trait_impl[impl_102] <A, B, C> std::cmp::Ord<  > for `(A, B, C) where A : Ord<>, B : Ord<>, C : Ord<> {
    fn «cmp»<> (self : `(A, B, C), other : `(A, B, C)) -> cmp::Ordering<  > {
        let mut result = ((A as std::cmp::Ord<  >)::cmp<  > as λ(A, A) → cmp::Ordering<  >)(self.0, other.0);
        if ((cmp::Ordering<  > as Eq<  >)::eq<  > as λ(cmp::Ordering<  >, cmp::Ordering<  >) → bool)(result, (@cmp::Ordering::equal<  > as λ() → cmp::Ordering<  >)()) {
                    result = ((B as std::cmp::Ord<  >)::cmp<  > as λ(B, B) → cmp::Ordering<  >)(self.1, other.1);
                skip;
        };
        if ((cmp::Ordering<  > as Eq<  >)::eq<  > as λ(cmp::Ordering<  >, cmp::Ordering<  >) → bool)(result, (@cmp::Ordering::equal<  > as λ() → cmp::Ordering<  >)()) {
                    result = ((C as std::cmp::Ord<  >)::cmp<  > as λ(C, C) → cmp::Ordering<  >)(self.2, other.2);
                skip;
        };
        result;
}
}

nr_trait_impl[impl_103] <C, A, D, B> std::cmp::Ord<  > for `(A, B, C, D) where A : Ord<>, B : Ord<>, C : Ord<>, D : Ord<> {
    fn «cmp»<> (self : `(A, B, C, D), other : `(A, B, C, D)) -> cmp::Ordering<  > {
        let mut result = ((A as std::cmp::Ord<  >)::cmp<  > as λ(A, A) → cmp::Ordering<  >)(self.0, other.0);
        if ((cmp::Ordering<  > as Eq<  >)::eq<  > as λ(cmp::Ordering<  >, cmp::Ordering<  >) → bool)(result, (@cmp::Ordering::equal<  > as λ() → cmp::Ordering<  >)()) {
                    result = ((B as std::cmp::Ord<  >)::cmp<  > as λ(B, B) → cmp::Ordering<  >)(self.1, other.1);
                skip;
        };
        if ((cmp::Ordering<  > as Eq<  >)::eq<  > as λ(cmp::Ordering<  >, cmp::Ordering<  >) → bool)(result, (@cmp::Ordering::equal<  > as λ() → cmp::Ordering<  >)()) {
                    result = ((C as std::cmp::Ord<  >)::cmp<  > as λ(C, C) → cmp::Ordering<  >)(self.2, other.2);
                skip;
        };
        if ((cmp::Ordering<  > as Eq<  >)::eq<  > as λ(cmp::Ordering<  >, cmp::Ordering<  >) → bool)(result, (@cmp::Ordering::equal<  > as λ() → cmp::Ordering<  >)()) {
                    result = ((D as std::cmp::Ord<  >)::cmp<  > as λ(D, D) → cmp::Ordering<  >)(self.3, other.3);
                skip;
        };
        result;
}
}

nr_trait_impl[impl_104] <B, A, C, E, D> std::cmp::Ord<  > for `(A, B, C, D, E) where A : Ord<>, B : Ord<>, C : Ord<>, D : Ord<>, E : Ord<> {
    fn «cmp»<> (self : `(A, B, C, D, E), other : `(A, B, C, D, E)) -> cmp::Ordering<  > {
        let mut result = ((A as std::cmp::Ord<  >)::cmp<  > as λ(A, A) → cmp::Ordering<  >)(self.0, other.0);
        if ((cmp::Ordering<  > as Eq<  >)::eq<  > as λ(cmp::Ordering<  >, cmp::Ordering<  >) → bool)(result, (@cmp::Ordering::equal<  > as λ() → cmp::Ordering<  >)()) {
                    result = ((B as std::cmp::Ord<  >)::cmp<  > as λ(B, B) → cmp::Ordering<  >)(self.1, other.1);
                skip;
        };
        if ((cmp::Ordering<  > as Eq<  >)::eq<  > as λ(cmp::Ordering<  >, cmp::Ordering<  >) → bool)(result, (@cmp::Ordering::equal<  > as λ() → cmp::Ordering<  >)()) {
                    result = ((C as std::cmp::Ord<  >)::cmp<  > as λ(C, C) → cmp::Ordering<  >)(self.2, other.2);
                skip;
        };
        if ((cmp::Ordering<  > as Eq<  >)::eq<  > as λ(cmp::Ordering<  >, cmp::Ordering<  >) → bool)(result, (@cmp::Ordering::equal<  > as λ() → cmp::Ordering<  >)()) {
                    result = ((D as std::cmp::Ord<  >)::cmp<  > as λ(D, D) → cmp::Ordering<  >)(self.3, other.3);
                skip;
        };
        if ((cmp::Ordering<  > as Eq<  >)::eq<  > as λ(cmp::Ordering<  >, cmp::Ordering<  >) → bool)(result, (@cmp::Ordering::equal<  > as λ() → cmp::Ordering<  >)()) {
                    result = ((E as std::cmp::Ord<  >)::cmp<  > as λ(E, E) → cmp::Ordering<  >)(self.4, other.4);
                skip;
        };
        result;
}
}

nr_def «cmp»::«max»<T>(v1 : T, v2 : T) -> T {
    if ((T as Ord<  >)::cmp<  > as λ(T, T) → bool)(v1, v2) {
            v1;
    } else {
            v2;
    };
}

nr_def «cmp»::«min»<T>(v1 : T, v2 : T) -> T {
    if ((T as Ord<  >)::cmp<  > as λ(T, T) → bool)(v1, v2) {
            v2;
    } else {
            v1;
    };
}

nr_def «cmp»::«cmp_tests»::«sanity_check_min»<>() -> Unit {
    #assert(#uEq((@std::cmp::min< u64 > as λ(u64, u64) → u64)(#cast(0 : Field) : u64, #cast(1 : Field) : u64), 0 : u64) : bool) : Unit;
    #assert(#uEq((@std::cmp::min< u64 > as λ(u64, u64) → u64)(#cast(0 : Field) : u64, #cast(0 : Field) : u64), 0 : u64) : bool) : Unit;
    #assert(#uEq((@std::cmp::min< u64 > as λ(u64, u64) → u64)(#cast(1 : Field) : u64, #cast(1 : Field) : u64), 1 : u64) : bool) : Unit;
    #assert(#uEq((@std::cmp::min< u8 > as λ(u8, u8) → u8)(#cast(255 : Field) : u8, #cast(0 : Field) : u8), 0 : u8) : bool) : Unit;
}

nr_def «cmp»::«cmp_tests»::«sanity_check_max»<>() -> Unit {
    #assert(#uEq((@std::cmp::max< u64 > as λ(u64, u64) → u64)(#cast(0 : Field) : u64, #cast(1 : Field) : u64), 1 : u64) : bool) : Unit;
    #assert(#uEq((@std::cmp::max< u64 > as λ(u64, u64) → u64)(#cast(0 : Field) : u64, #cast(0 : Field) : u64), 0 : u64) : bool) : Unit;
    #assert(#uEq((@std::cmp::max< u64 > as λ(u64, u64) → u64)(#cast(1 : Field) : u64, #cast(1 : Field) : u64), 1 : u64) : bool) : Unit;
    #assert(#uEq((@std::cmp::max< u8 > as λ(u8, u8) → u8)(#cast(255 : Field) : u8, #cast(0 : Field) : u8), 255 : u8) : bool) : Unit;
}


def Cmp.env := Lampe.Env.mk [«cmp::Ordering::equal», «cmp::Ordering::greater», «cmp::Ordering::less», «cmp::cmp_tests::sanity_check_max», «cmp::cmp_tests::sanity_check_min», «cmp::max», «cmp::min»] [impl_100, impl_101, impl_102, impl_103, impl_104, impl_67, impl_68, impl_69, impl_70, impl_71, impl_72, impl_73, impl_74, impl_75, impl_76, impl_77, impl_78, impl_79, impl_80, impl_81, impl_82, impl_83, impl_84, impl_85, impl_86, impl_87, impl_88, impl_89, impl_90, impl_91, impl_92, impl_93, impl_94, impl_95, impl_96, impl_97, impl_98, impl_99]