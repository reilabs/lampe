-- Generated by lampe

import «std-0.0.0».Extracted.GeneratedTypes
import Lampe

open Lampe

namespace «std-0.0.0»
namespace Extracted

nr_trait_impl[impl_40] <T> std::convert::From< T > for T where  {
    fn «from»<> (input : T) -> T {
        input;
}
}

nr_trait_impl[impl_41] <U, T> std::convert::Into< T > for U where T : From<U> {
    fn «into»<> (self : U) -> T {
        ((T as std::convert::From< U >)::from<  > as λ(U) → T)(self);
}
}

nr_trait_impl[impl_42] <> std::convert::From< u8 > for u32 where  {
    fn «from»<> (value : u8) -> u32 {
        #cast(value) : u32;
}
}

nr_trait_impl[impl_43] <> std::convert::From< u8 > for u64 where  {
    fn «from»<> (value : u8) -> u64 {
        #cast(value) : u64;
}
}

nr_trait_impl[impl_44] <> std::convert::From< u32 > for u64 where  {
    fn «from»<> (value : u32) -> u64 {
        #cast(value) : u64;
}
}

nr_trait_impl[impl_45] <> std::convert::From< u8 > for u128 where  {
    fn «from»<> (value : u8) -> u128 {
        #cast(value) : u128;
}
}

nr_trait_impl[impl_46] <> std::convert::From< u32 > for u128 where  {
    fn «from»<> (value : u32) -> u128 {
        #cast(value) : u128;
}
}

nr_trait_impl[impl_47] <> std::convert::From< u64 > for u128 where  {
    fn «from»<> (value : u64) -> u128 {
        #cast(value) : u128;
}
}

nr_trait_impl[impl_48] <> std::convert::From< u8 > for Field where  {
    fn «from»<> (value : u8) -> Field {
        #cast(value) : Field;
}
}

nr_trait_impl[impl_49] <> std::convert::From< u32 > for Field where  {
    fn «from»<> (value : u32) -> Field {
        #cast(value) : Field;
}
}

nr_trait_impl[impl_50] <> std::convert::From< u64 > for Field where  {
    fn «from»<> (value : u64) -> Field {
        #cast(value) : Field;
}
}

nr_trait_impl[impl_51] <> std::convert::From< u128 > for Field where  {
    fn «from»<> (value : u128) -> Field {
        #cast(value) : Field;
}
}

nr_trait_impl[impl_52] <> std::convert::From< i8 > for i32 where  {
    fn «from»<> (value : i8) -> i32 {
        #cast(value) : i32;
}
}

nr_trait_impl[impl_53] <> std::convert::From< i8 > for i64 where  {
    fn «from»<> (value : i8) -> i64 {
        #cast(value) : i64;
}
}

nr_trait_impl[impl_54] <> std::convert::From< i32 > for i64 where  {
    fn «from»<> (value : i32) -> i64 {
        #cast(value) : i64;
}
}

nr_trait_impl[impl_55] <> std::convert::From< bool > for u8 where  {
    fn «from»<> (value : bool) -> u8 {
        #cast(value) : u8;
}
}

nr_trait_impl[impl_56] <> std::convert::From< bool > for u32 where  {
    fn «from»<> (value : bool) -> u32 {
        #cast(value) : u32;
}
}

nr_trait_impl[impl_57] <> std::convert::From< bool > for u64 where  {
    fn «from»<> (value : bool) -> u64 {
        #cast(value) : u64;
}
}

nr_trait_impl[impl_58] <> std::convert::From< bool > for i8 where  {
    fn «from»<> (value : bool) -> i8 {
        #cast(value) : i8;
}
}

nr_trait_impl[impl_59] <> std::convert::From< bool > for i32 where  {
    fn «from»<> (value : bool) -> i32 {
        #cast(value) : i32;
}
}

nr_trait_impl[impl_60] <> std::convert::From< bool > for i64 where  {
    fn «from»<> (value : bool) -> i64 {
        #cast(value) : i64;
}
}

nr_trait_impl[impl_61] <> std::convert::From< bool > for Field where  {
    fn «from»<> (value : bool) -> Field {
        #cast(value) : Field;
}
}

nr_trait_impl[impl_358] <> std::convert::AsPrimitive< u64 > for i32 where  {
    fn «as_»<> (self : i32) -> u64 {
        #cast(self) : u64;
}
}

nr_trait_impl[impl_410] <> std::convert::AsPrimitive< i64 > for u128 where  {
    fn «as_»<> (self : u128) -> i64 {
        #cast(self) : i64;
}
}

nr_trait_impl[impl_404] <> std::convert::AsPrimitive< i32 > for Field where  {
    fn «as_»<> (self : Field) -> i32 {
        #cast(self) : i32;
}
}

nr_trait_impl[impl_406] <> std::convert::AsPrimitive< i64 > for u8 where  {
    fn «as_»<> (self : u8) -> i64 {
        #cast(self) : i64;
}
}

nr_trait_impl[impl_357] <> std::convert::AsPrimitive< u64 > for i16 where  {
    fn «as_»<> (self : i16) -> u64 {
        #cast(self) : u64;
}
}

nr_trait_impl[impl_327] <> std::convert::AsPrimitive< u8 > for Field where  {
    fn «as_»<> (self : Field) -> u8 {
        #cast(self) : u8;
}
}

nr_trait_impl[impl_402] <> std::convert::AsPrimitive< i32 > for i32 where  {
    fn «as_»<> (self : i32) -> i32 {
        self;
}
}

nr_trait_impl[impl_361] <> std::convert::AsPrimitive< u128 > for bool where  {
    fn «as_»<> (self : bool) -> u128 {
        #cast(self) : u128;
}
}

nr_trait_impl[impl_350] <> std::convert::AsPrimitive< u64 > for bool where  {
    fn «as_»<> (self : bool) -> u64 {
        #cast(self) : u64;
}
}

nr_trait_impl[impl_368] <> std::convert::AsPrimitive< u128 > for i16 where  {
    fn «as_»<> (self : i16) -> u128 {
        #cast(self) : u128;
}
}

nr_trait_impl[impl_321] <> std::convert::AsPrimitive< u8 > for u64 where  {
    fn «as_»<> (self : u64) -> u8 {
        #cast(self) : u8;
}
}

nr_trait_impl[impl_334] <> std::convert::AsPrimitive< u16 > for i8 where  {
    fn «as_»<> (self : i8) -> u16 {
        #cast(self) : u16;
}
}

nr_trait_impl[impl_339] <> std::convert::AsPrimitive< u32 > for bool where  {
    fn «as_»<> (self : bool) -> u32 {
        #cast(self) : u32;
}
}

nr_trait_impl[impl_344] <> std::convert::AsPrimitive< u32 > for u128 where  {
    fn «as_»<> (self : u128) -> u32 {
        #cast(self) : u32;
}
}

nr_trait_impl[impl_311] <> std::convert::AsPrimitive< bool > for u128 where  {
    fn «as_»<> (self : u128) -> bool {
        #uNeq(self, 0 : u128) : bool;
}
}

nr_trait_impl[impl_310] <> std::convert::AsPrimitive< bool > for u64 where  {
    fn «as_»<> (self : u64) -> bool {
        #uNeq(self, 0 : u64) : bool;
}
}

nr_trait_impl[impl_394] <> std::convert::AsPrimitive< i32 > for bool where  {
    fn «as_»<> (self : bool) -> i32 {
        #cast(self) : i32;
}
}

nr_trait_impl[impl_424] <> std::convert::AsPrimitive< Field > for i32 where  {
    fn «as_»<> (self : i32) -> Field {
        #cast(self) : Field;
}
}

nr_trait_impl[impl_373] <> std::convert::AsPrimitive< i8 > for u8 where  {
    fn «as_»<> (self : u8) -> i8 {
        #cast(self) : i8;
}
}

nr_trait_impl[impl_372] <> std::convert::AsPrimitive< i8 > for bool where  {
    fn «as_»<> (self : bool) -> i8 {
        #cast(self) : i8;
}
}

nr_trait_impl[impl_423] <> std::convert::AsPrimitive< Field > for i16 where  {
    fn «as_»<> (self : i16) -> Field {
        #cast(self) : Field;
}
}

nr_trait_impl[impl_320] <> std::convert::AsPrimitive< u8 > for u32 where  {
    fn «as_»<> (self : u32) -> u8 {
        #cast(self) : u8;
}
}

nr_trait_impl[impl_369] <> std::convert::AsPrimitive< u128 > for i32 where  {
    fn «as_»<> (self : i32) -> u128 {
        #cast(self) : u128;
}
}

nr_trait_impl[impl_417] <> std::convert::AsPrimitive< Field > for u8 where  {
    fn «as_»<> (self : u8) -> Field {
        #cast(self) : Field;
}
}

nr_trait_impl[impl_366] <> std::convert::AsPrimitive< u128 > for u128 where  {
    fn «as_»<> (self : u128) -> u128 {
        self;
}
}

nr_trait_impl[impl_343] <> std::convert::AsPrimitive< u32 > for u64 where  {
    fn «as_»<> (self : u64) -> u32 {
        #cast(self) : u32;
}
}

nr_trait_impl[impl_383] <> std::convert::AsPrimitive< i16 > for bool where  {
    fn «as_»<> (self : bool) -> i16 {
        #cast(self) : i16;
}
}

nr_trait_impl[impl_403] <> std::convert::AsPrimitive< i32 > for i64 where  {
    fn «as_»<> (self : i64) -> i32 {
        #cast(self) : i32;
}
}

nr_trait_impl[impl_308] <> std::convert::AsPrimitive< bool > for u16 where  {
    fn «as_»<> (self : u16) -> bool {
        #uNeq(self, 0 : u16) : bool;
}
}

nr_trait_impl[impl_400] <> std::convert::AsPrimitive< i32 > for i8 where  {
    fn «as_»<> (self : i8) -> i32 {
        #cast(self) : i32;
}
}

nr_trait_impl[impl_376] <> std::convert::AsPrimitive< i8 > for u64 where  {
    fn «as_»<> (self : u64) -> i8 {
        #cast(self) : i8;
}
}

nr_trait_impl[impl_340] <> std::convert::AsPrimitive< u32 > for u8 where  {
    fn «as_»<> (self : u8) -> u32 {
        #cast(self) : u32;
}
}

nr_trait_impl[impl_396] <> std::convert::AsPrimitive< i32 > for u16 where  {
    fn «as_»<> (self : u16) -> i32 {
        #cast(self) : i32;
}
}

nr_trait_impl[impl_416] <> std::convert::AsPrimitive< Field > for bool where  {
    fn «as_»<> (self : bool) -> Field {
        #cast(self) : Field;
}
}

nr_trait_impl[impl_318] <> std::convert::AsPrimitive< u8 > for u8 where  {
    fn «as_»<> (self : u8) -> u8 {
        self;
}
}

nr_trait_impl[impl_353] <> std::convert::AsPrimitive< u64 > for u32 where  {
    fn «as_»<> (self : u32) -> u64 {
        #cast(self) : u64;
}
}

nr_trait_impl[impl_415] <> std::convert::AsPrimitive< i64 > for Field where  {
    fn «as_»<> (self : Field) -> i64 {
        #cast(self) : i64;
}
}

nr_trait_impl[impl_387] <> std::convert::AsPrimitive< i16 > for u64 where  {
    fn «as_»<> (self : u64) -> i16 {
        #cast(self) : i16;
}
}

nr_trait_impl[impl_389] <> std::convert::AsPrimitive< i16 > for i8 where  {
    fn «as_»<> (self : i8) -> i16 {
        #cast(self) : i16;
}
}

nr_trait_impl[impl_341] <> std::convert::AsPrimitive< u32 > for u16 where  {
    fn «as_»<> (self : u16) -> u32 {
        #cast(self) : u32;
}
}

nr_trait_impl[impl_420] <> std::convert::AsPrimitive< Field > for u64 where  {
    fn «as_»<> (self : u64) -> Field {
        #cast(self) : Field;
}
}

nr_trait_impl[impl_405] <> std::convert::AsPrimitive< i64 > for bool where  {
    fn «as_»<> (self : bool) -> i64 {
        #cast(self) : i64;
}
}

nr_trait_impl[impl_390] <> std::convert::AsPrimitive< i16 > for i16 where  {
    fn «as_»<> (self : i16) -> i16 {
        self;
}
}

nr_trait_impl[impl_337] <> std::convert::AsPrimitive< u16 > for i64 where  {
    fn «as_»<> (self : i64) -> u16 {
        #cast(self) : u16;
}
}

nr_trait_impl[impl_380] <> std::convert::AsPrimitive< i8 > for i32 where  {
    fn «as_»<> (self : i32) -> i8 {
        #cast(self) : i8;
}
}

nr_trait_impl[impl_399] <> std::convert::AsPrimitive< i32 > for u128 where  {
    fn «as_»<> (self : u128) -> i32 {
        #cast(self) : i32;
}
}

nr_trait_impl[impl_381] <> std::convert::AsPrimitive< i8 > for i64 where  {
    fn «as_»<> (self : i64) -> i8 {
        #cast(self) : i8;
}
}

nr_trait_impl[impl_413] <> std::convert::AsPrimitive< i64 > for i32 where  {
    fn «as_»<> (self : i32) -> i64 {
        #cast(self) : i64;
}
}

nr_trait_impl[impl_397] <> std::convert::AsPrimitive< i32 > for u32 where  {
    fn «as_»<> (self : u32) -> i32 {
        #cast(self) : i32;
}
}

nr_trait_impl[impl_364] <> std::convert::AsPrimitive< u128 > for u32 where  {
    fn «as_»<> (self : u32) -> u128 {
        #cast(self) : u128;
}
}

nr_trait_impl[impl_367] <> std::convert::AsPrimitive< u128 > for i8 where  {
    fn «as_»<> (self : i8) -> u128 {
        #cast(self) : u128;
}
}

nr_trait_impl[impl_409] <> std::convert::AsPrimitive< i64 > for u64 where  {
    fn «as_»<> (self : u64) -> i64 {
        #cast(self) : i64;
}
}

nr_trait_impl[impl_385] <> std::convert::AsPrimitive< i16 > for u16 where  {
    fn «as_»<> (self : u16) -> i16 {
        #cast(self) : i16;
}
}

nr_trait_impl[impl_317] <> std::convert::AsPrimitive< u8 > for bool where  {
    fn «as_»<> (self : bool) -> u8 {
        #cast(self) : u8;
}
}

nr_trait_impl[impl_391] <> std::convert::AsPrimitive< i16 > for i32 where  {
    fn «as_»<> (self : i32) -> i16 {
        #cast(self) : i16;
}
}

nr_trait_impl[impl_365] <> std::convert::AsPrimitive< u128 > for u64 where  {
    fn «as_»<> (self : u64) -> u128 {
        #cast(self) : u128;
}
}

nr_trait_impl[impl_414] <> std::convert::AsPrimitive< i64 > for i64 where  {
    fn «as_»<> (self : i64) -> i64 {
        self;
}
}

nr_trait_impl[impl_422] <> std::convert::AsPrimitive< Field > for i8 where  {
    fn «as_»<> (self : i8) -> Field {
        #cast(self) : Field;
}
}

nr_trait_impl[impl_411] <> std::convert::AsPrimitive< i64 > for i8 where  {
    fn «as_»<> (self : i8) -> i64 {
        #cast(self) : i64;
}
}

nr_trait_impl[impl_328] <> std::convert::AsPrimitive< u16 > for bool where  {
    fn «as_»<> (self : bool) -> u16 {
        #cast(self) : u16;
}
}

nr_trait_impl[impl_309] <> std::convert::AsPrimitive< bool > for u32 where  {
    fn «as_»<> (self : u32) -> bool {
        #uNeq(self, 0 : u32) : bool;
}
}

nr_trait_impl[impl_312] <> std::convert::AsPrimitive< bool > for i8 where  {
    fn «as_»<> (self : i8) -> bool {
        #iNeq(self, 0 : i8) : bool;
}
}

nr_trait_impl[impl_346] <> std::convert::AsPrimitive< u32 > for i16 where  {
    fn «as_»<> (self : i16) -> u32 {
        #cast(self) : u32;
}
}

nr_trait_impl[impl_323] <> std::convert::AsPrimitive< u8 > for i8 where  {
    fn «as_»<> (self : i8) -> u8 {
        #cast(self) : u8;
}
}

nr_trait_impl[impl_425] <> std::convert::AsPrimitive< Field > for i64 where  {
    fn «as_»<> (self : i64) -> Field {
        #cast(self) : Field;
}
}

nr_trait_impl[impl_348] <> std::convert::AsPrimitive< u32 > for i64 where  {
    fn «as_»<> (self : i64) -> u32 {
        #cast(self) : u32;
}
}

nr_trait_impl[impl_359] <> std::convert::AsPrimitive< u64 > for i64 where  {
    fn «as_»<> (self : i64) -> u64 {
        #cast(self) : u64;
}
}

nr_trait_impl[impl_314] <> std::convert::AsPrimitive< bool > for i32 where  {
    fn «as_»<> (self : i32) -> bool {
        #iNeq(self, 0 : i32) : bool;
}
}

nr_trait_impl[impl_342] <> std::convert::AsPrimitive< u32 > for u32 where  {
    fn «as_»<> (self : u32) -> u32 {
        self;
}
}

nr_trait_impl[impl_306] <> std::convert::AsPrimitive< bool > for bool where  {
    fn «as_»<> (self : bool) -> bool {
        self;
}
}

nr_trait_impl[impl_356] <> std::convert::AsPrimitive< u64 > for i8 where  {
    fn «as_»<> (self : i8) -> u64 {
        #cast(self) : u64;
}
}

nr_trait_impl[impl_393] <> std::convert::AsPrimitive< i16 > for Field where  {
    fn «as_»<> (self : Field) -> i16 {
        #cast(self) : i16;
}
}

nr_trait_impl[impl_349] <> std::convert::AsPrimitive< u32 > for Field where  {
    fn «as_»<> (self : Field) -> u32 {
        #cast(self) : u32;
}
}

nr_trait_impl[impl_360] <> std::convert::AsPrimitive< u64 > for Field where  {
    fn «as_»<> (self : Field) -> u64 {
        #cast(self) : u64;
}
}

nr_trait_impl[impl_421] <> std::convert::AsPrimitive< Field > for u128 where  {
    fn «as_»<> (self : u128) -> Field {
        #cast(self) : Field;
}
}

nr_trait_impl[impl_412] <> std::convert::AsPrimitive< i64 > for i16 where  {
    fn «as_»<> (self : i16) -> i64 {
        #cast(self) : i64;
}
}

nr_trait_impl[impl_329] <> std::convert::AsPrimitive< u16 > for u8 where  {
    fn «as_»<> (self : u8) -> u16 {
        #cast(self) : u16;
}
}

nr_trait_impl[impl_375] <> std::convert::AsPrimitive< i8 > for u32 where  {
    fn «as_»<> (self : u32) -> i8 {
        #cast(self) : i8;
}
}

nr_trait_impl[impl_370] <> std::convert::AsPrimitive< u128 > for i64 where  {
    fn «as_»<> (self : i64) -> u128 {
        #cast(self) : u128;
}
}

nr_trait_impl[impl_418] <> std::convert::AsPrimitive< Field > for u16 where  {
    fn «as_»<> (self : u16) -> Field {
        #cast(self) : Field;
}
}

nr_trait_impl[impl_319] <> std::convert::AsPrimitive< u8 > for u16 where  {
    fn «as_»<> (self : u16) -> u8 {
        #cast(self) : u8;
}
}

nr_trait_impl[impl_324] <> std::convert::AsPrimitive< u8 > for i16 where  {
    fn «as_»<> (self : i16) -> u8 {
        #cast(self) : u8;
}
}

nr_trait_impl[impl_392] <> std::convert::AsPrimitive< i16 > for i64 where  {
    fn «as_»<> (self : i64) -> i16 {
        #cast(self) : i16;
}
}

nr_trait_impl[impl_355] <> std::convert::AsPrimitive< u64 > for u128 where  {
    fn «as_»<> (self : u128) -> u64 {
        #cast(self) : u64;
}
}

nr_trait_impl[impl_345] <> std::convert::AsPrimitive< u32 > for i8 where  {
    fn «as_»<> (self : i8) -> u32 {
        #cast(self) : u32;
}
}

nr_trait_impl[impl_407] <> std::convert::AsPrimitive< i64 > for u16 where  {
    fn «as_»<> (self : u16) -> i64 {
        #cast(self) : i64;
}
}

nr_trait_impl[impl_354] <> std::convert::AsPrimitive< u64 > for u64 where  {
    fn «as_»<> (self : u64) -> u64 {
        self;
}
}

nr_trait_impl[impl_362] <> std::convert::AsPrimitive< u128 > for u8 where  {
    fn «as_»<> (self : u8) -> u128 {
        #cast(self) : u128;
}
}

nr_trait_impl[impl_426] <> std::convert::AsPrimitive< Field > for Field where  {
    fn «as_»<> (self : Field) -> Field {
        self;
}
}

nr_trait_impl[impl_388] <> std::convert::AsPrimitive< i16 > for u128 where  {
    fn «as_»<> (self : u128) -> i16 {
        #cast(self) : i16;
}
}

nr_trait_impl[impl_347] <> std::convert::AsPrimitive< u32 > for i32 where  {
    fn «as_»<> (self : i32) -> u32 {
        #cast(self) : u32;
}
}

nr_trait_impl[impl_384] <> std::convert::AsPrimitive< i16 > for u8 where  {
    fn «as_»<> (self : u8) -> i16 {
        #cast(self) : i16;
}
}

nr_trait_impl[impl_338] <> std::convert::AsPrimitive< u16 > for Field where  {
    fn «as_»<> (self : Field) -> u16 {
        #cast(self) : u16;
}
}

nr_trait_impl[impl_332] <> std::convert::AsPrimitive< u16 > for u64 where  {
    fn «as_»<> (self : u64) -> u16 {
        #cast(self) : u16;
}
}

nr_trait_impl[impl_322] <> std::convert::AsPrimitive< u8 > for u128 where  {
    fn «as_»<> (self : u128) -> u8 {
        #cast(self) : u8;
}
}

nr_trait_impl[impl_330] <> std::convert::AsPrimitive< u16 > for u16 where  {
    fn «as_»<> (self : u16) -> u16 {
        self;
}
}

nr_trait_impl[impl_352] <> std::convert::AsPrimitive< u64 > for u16 where  {
    fn «as_»<> (self : u16) -> u64 {
        #cast(self) : u64;
}
}

nr_trait_impl[impl_336] <> std::convert::AsPrimitive< u16 > for i32 where  {
    fn «as_»<> (self : i32) -> u16 {
        #cast(self) : u16;
}
}

nr_trait_impl[impl_374] <> std::convert::AsPrimitive< i8 > for u16 where  {
    fn «as_»<> (self : u16) -> i8 {
        #cast(self) : i8;
}
}

nr_trait_impl[impl_379] <> std::convert::AsPrimitive< i8 > for i16 where  {
    fn «as_»<> (self : i16) -> i8 {
        #cast(self) : i8;
}
}

nr_trait_impl[impl_377] <> std::convert::AsPrimitive< i8 > for u128 where  {
    fn «as_»<> (self : u128) -> i8 {
        #cast(self) : i8;
}
}

nr_trait_impl[impl_316] <> std::convert::AsPrimitive< bool > for Field where  {
    fn «as_»<> (self : Field) -> bool {
        #fNeq(self, 0 : Field) : bool;
}
}

nr_trait_impl[impl_371] <> std::convert::AsPrimitive< u128 > for Field where  {
    fn «as_»<> (self : Field) -> u128 {
        #cast(self) : u128;
}
}

nr_trait_impl[impl_331] <> std::convert::AsPrimitive< u16 > for u32 where  {
    fn «as_»<> (self : u32) -> u16 {
        #cast(self) : u16;
}
}

nr_trait_impl[impl_351] <> std::convert::AsPrimitive< u64 > for u8 where  {
    fn «as_»<> (self : u8) -> u64 {
        #cast(self) : u64;
}
}

nr_trait_impl[impl_307] <> std::convert::AsPrimitive< bool > for u8 where  {
    fn «as_»<> (self : u8) -> bool {
        #uNeq(self, 0 : u8) : bool;
}
}

nr_trait_impl[impl_382] <> std::convert::AsPrimitive< i8 > for Field where  {
    fn «as_»<> (self : Field) -> i8 {
        #cast(self) : i8;
}
}

nr_trait_impl[impl_401] <> std::convert::AsPrimitive< i32 > for i16 where  {
    fn «as_»<> (self : i16) -> i32 {
        #cast(self) : i32;
}
}

nr_trait_impl[impl_363] <> std::convert::AsPrimitive< u128 > for u16 where  {
    fn «as_»<> (self : u16) -> u128 {
        #cast(self) : u128;
}
}

nr_trait_impl[impl_386] <> std::convert::AsPrimitive< i16 > for u32 where  {
    fn «as_»<> (self : u32) -> i16 {
        #cast(self) : i16;
}
}

nr_trait_impl[impl_326] <> std::convert::AsPrimitive< u8 > for i64 where  {
    fn «as_»<> (self : i64) -> u8 {
        #cast(self) : u8;
}
}

nr_trait_impl[impl_408] <> std::convert::AsPrimitive< i64 > for u32 where  {
    fn «as_»<> (self : u32) -> i64 {
        #cast(self) : i64;
}
}

nr_trait_impl[impl_378] <> std::convert::AsPrimitive< i8 > for i8 where  {
    fn «as_»<> (self : i8) -> i8 {
        self;
}
}

nr_trait_impl[impl_419] <> std::convert::AsPrimitive< Field > for u32 where  {
    fn «as_»<> (self : u32) -> Field {
        #cast(self) : Field;
}
}

nr_trait_impl[impl_313] <> std::convert::AsPrimitive< bool > for i16 where  {
    fn «as_»<> (self : i16) -> bool {
        #iNeq(self, 0 : i16) : bool;
}
}

nr_trait_impl[impl_333] <> std::convert::AsPrimitive< u16 > for u128 where  {
    fn «as_»<> (self : u128) -> u16 {
        #cast(self) : u16;
}
}

nr_trait_impl[impl_325] <> std::convert::AsPrimitive< u8 > for i32 where  {
    fn «as_»<> (self : i32) -> u8 {
        #cast(self) : u8;
}
}

nr_trait_impl[impl_315] <> std::convert::AsPrimitive< bool > for i64 where  {
    fn «as_»<> (self : i64) -> bool {
        #iNeq(self, 0 : i64) : bool;
}
}

nr_trait_impl[impl_398] <> std::convert::AsPrimitive< i32 > for u64 where  {
    fn «as_»<> (self : u64) -> i32 {
        #cast(self) : i32;
}
}

nr_trait_impl[impl_395] <> std::convert::AsPrimitive< i32 > for u8 where  {
    fn «as_»<> (self : u8) -> i32 {
        #cast(self) : i32;
}
}

nr_trait_impl[impl_335] <> std::convert::AsPrimitive< u16 > for i16 where  {
    fn «as_»<> (self : i16) -> u16 {
        #cast(self) : u16;
}
}


def Convert.env := Lampe.Env.mk [] [impl_306, impl_307, impl_308, impl_309, impl_310, impl_311, impl_312, impl_313, impl_314, impl_315, impl_316, impl_317, impl_318, impl_319, impl_320, impl_321, impl_322, impl_323, impl_324, impl_325, impl_326, impl_327, impl_328, impl_329, impl_330, impl_331, impl_332, impl_333, impl_334, impl_335, impl_336, impl_337, impl_338, impl_339, impl_340, impl_341, impl_342, impl_343, impl_344, impl_345, impl_346, impl_347, impl_348, impl_349, impl_350, impl_351, impl_352, impl_353, impl_354, impl_355, impl_356, impl_357, impl_358, impl_359, impl_360, impl_361, impl_362, impl_363, impl_364, impl_365, impl_366, impl_367, impl_368, impl_369, impl_370, impl_371, impl_372, impl_373, impl_374, impl_375, impl_376, impl_377, impl_378, impl_379, impl_380, impl_381, impl_382, impl_383, impl_384, impl_385, impl_386, impl_387, impl_388, impl_389, impl_390, impl_391, impl_392, impl_393, impl_394, impl_395, impl_396, impl_397, impl_398, impl_399, impl_40, impl_400, impl_401, impl_402, impl_403, impl_404, impl_405, impl_406, impl_407, impl_408, impl_409, impl_41, impl_410, impl_411, impl_412, impl_413, impl_414, impl_415, impl_416, impl_417, impl_418, impl_419, impl_42, impl_420, impl_421, impl_422, impl_423, impl_424, impl_425, impl_426, impl_43, impl_44, impl_45, impl_46, impl_47, impl_48, impl_49, impl_50, impl_51, impl_52, impl_53, impl_54, impl_55, impl_56, impl_57, impl_58, impl_59, impl_60, impl_61]