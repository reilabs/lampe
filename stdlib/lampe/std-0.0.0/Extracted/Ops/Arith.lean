-- Generated by lampe

import «std-0.0.0».Extracted.GeneratedTypes
import Lampe

open Lampe

namespace «std-0.0.0»
namespace Extracted

nr_trait_impl[impl_105] <> std::ops::arith::Add<  > for Field where  {
    fn «add»<> (self : Field, other : Field) -> Field {
        #fAdd(self, other) : Field;
}
}

nr_trait_impl[impl_106] <> std::ops::arith::Add<  > for u128 where  {
    fn «add»<> (self : u128, other : u128) -> u128 {
        #uAdd(self, other) : u128;
}
}

nr_trait_impl[impl_107] <> std::ops::arith::Add<  > for u64 where  {
    fn «add»<> (self : u64, other : u64) -> u64 {
        #uAdd(self, other) : u64;
}
}

nr_trait_impl[impl_108] <> std::ops::arith::Add<  > for u32 where  {
    fn «add»<> (self : u32, other : u32) -> u32 {
        #uAdd(self, other) : u32;
}
}

nr_trait_impl[impl_109] <> std::ops::arith::Add<  > for u16 where  {
    fn «add»<> (self : u16, other : u16) -> u16 {
        #uAdd(self, other) : u16;
}
}

nr_trait_impl[impl_110] <> std::ops::arith::Add<  > for u8 where  {
    fn «add»<> (self : u8, other : u8) -> u8 {
        #uAdd(self, other) : u8;
}
}

nr_trait_impl[impl_111] <> std::ops::arith::Add<  > for u1 where  {
    fn «add»<> (self : u1, other : u1) -> u1 {
        #uAdd(self, other) : u1;
}
}

nr_trait_impl[impl_112] <> std::ops::arith::Add<  > for i8 where  {
    fn «add»<> (self : i8, other : i8) -> i8 {
        #iAdd(self, other) : i8;
}
}

nr_trait_impl[impl_113] <> std::ops::arith::Add<  > for i16 where  {
    fn «add»<> (self : i16, other : i16) -> i16 {
        #iAdd(self, other) : i16;
}
}

nr_trait_impl[impl_114] <> std::ops::arith::Add<  > for i32 where  {
    fn «add»<> (self : i32, other : i32) -> i32 {
        #iAdd(self, other) : i32;
}
}

nr_trait_impl[impl_115] <> std::ops::arith::Add<  > for i64 where  {
    fn «add»<> (self : i64, other : i64) -> i64 {
        #iAdd(self, other) : i64;
}
}

nr_trait_impl[impl_116] <> std::ops::arith::Sub<  > for Field where  {
    fn «sub»<> (self : Field, other : Field) -> Field {
        #fSub(self, other) : Field;
}
}

nr_trait_impl[impl_117] <> std::ops::arith::Sub<  > for u128 where  {
    fn «sub»<> (self : u128, other : u128) -> u128 {
        #uSub(self, other) : u128;
}
}

nr_trait_impl[impl_118] <> std::ops::arith::Sub<  > for u64 where  {
    fn «sub»<> (self : u64, other : u64) -> u64 {
        #uSub(self, other) : u64;
}
}

nr_trait_impl[impl_119] <> std::ops::arith::Sub<  > for u32 where  {
    fn «sub»<> (self : u32, other : u32) -> u32 {
        #uSub(self, other) : u32;
}
}

nr_trait_impl[impl_120] <> std::ops::arith::Sub<  > for u16 where  {
    fn «sub»<> (self : u16, other : u16) -> u16 {
        #uSub(self, other) : u16;
}
}

nr_trait_impl[impl_121] <> std::ops::arith::Sub<  > for u8 where  {
    fn «sub»<> (self : u8, other : u8) -> u8 {
        #uSub(self, other) : u8;
}
}

nr_trait_impl[impl_122] <> std::ops::arith::Sub<  > for u1 where  {
    fn «sub»<> (self : u1, other : u1) -> u1 {
        #uSub(self, other) : u1;
}
}

nr_trait_impl[impl_123] <> std::ops::arith::Sub<  > for i8 where  {
    fn «sub»<> (self : i8, other : i8) -> i8 {
        #iSub(self, other) : i8;
}
}

nr_trait_impl[impl_124] <> std::ops::arith::Sub<  > for i16 where  {
    fn «sub»<> (self : i16, other : i16) -> i16 {
        #iSub(self, other) : i16;
}
}

nr_trait_impl[impl_125] <> std::ops::arith::Sub<  > for i32 where  {
    fn «sub»<> (self : i32, other : i32) -> i32 {
        #iSub(self, other) : i32;
}
}

nr_trait_impl[impl_126] <> std::ops::arith::Sub<  > for i64 where  {
    fn «sub»<> (self : i64, other : i64) -> i64 {
        #iSub(self, other) : i64;
}
}

nr_trait_impl[impl_127] <> std::ops::arith::Mul<  > for Field where  {
    fn «mul»<> (self : Field, other : Field) -> Field {
        #fMul(self, other) : Field;
}
}

nr_trait_impl[impl_128] <> std::ops::arith::Mul<  > for u128 where  {
    fn «mul»<> (self : u128, other : u128) -> u128 {
        #uMul(self, other) : u128;
}
}

nr_trait_impl[impl_129] <> std::ops::arith::Mul<  > for u64 where  {
    fn «mul»<> (self : u64, other : u64) -> u64 {
        #uMul(self, other) : u64;
}
}

nr_trait_impl[impl_130] <> std::ops::arith::Mul<  > for u32 where  {
    fn «mul»<> (self : u32, other : u32) -> u32 {
        #uMul(self, other) : u32;
}
}

nr_trait_impl[impl_131] <> std::ops::arith::Mul<  > for u16 where  {
    fn «mul»<> (self : u16, other : u16) -> u16 {
        #uMul(self, other) : u16;
}
}

nr_trait_impl[impl_132] <> std::ops::arith::Mul<  > for u8 where  {
    fn «mul»<> (self : u8, other : u8) -> u8 {
        #uMul(self, other) : u8;
}
}

nr_trait_impl[impl_133] <> std::ops::arith::Mul<  > for u1 where  {
    fn «mul»<> (self : u1, other : u1) -> u1 {
        #uMul(self, other) : u1;
}
}

nr_trait_impl[impl_134] <> std::ops::arith::Mul<  > for i8 where  {
    fn «mul»<> (self : i8, other : i8) -> i8 {
        #iMul(self, other) : i8;
}
}

nr_trait_impl[impl_135] <> std::ops::arith::Mul<  > for i16 where  {
    fn «mul»<> (self : i16, other : i16) -> i16 {
        #iMul(self, other) : i16;
}
}

nr_trait_impl[impl_136] <> std::ops::arith::Mul<  > for i32 where  {
    fn «mul»<> (self : i32, other : i32) -> i32 {
        #iMul(self, other) : i32;
}
}

nr_trait_impl[impl_137] <> std::ops::arith::Mul<  > for i64 where  {
    fn «mul»<> (self : i64, other : i64) -> i64 {
        #iMul(self, other) : i64;
}
}

nr_trait_impl[impl_138] <> std::ops::arith::Div<  > for Field where  {
    fn «div»<> (self : Field, other : Field) -> Field {
        #fDiv(self, other) : Field;
}
}

nr_trait_impl[impl_139] <> std::ops::arith::Div<  > for u128 where  {
    fn «div»<> (self : u128, other : u128) -> u128 {
        #uDiv(self, other) : u128;
}
}

nr_trait_impl[impl_140] <> std::ops::arith::Div<  > for u64 where  {
    fn «div»<> (self : u64, other : u64) -> u64 {
        #uDiv(self, other) : u64;
}
}

nr_trait_impl[impl_141] <> std::ops::arith::Div<  > for u32 where  {
    fn «div»<> (self : u32, other : u32) -> u32 {
        #uDiv(self, other) : u32;
}
}

nr_trait_impl[impl_142] <> std::ops::arith::Div<  > for u16 where  {
    fn «div»<> (self : u16, other : u16) -> u16 {
        #uDiv(self, other) : u16;
}
}

nr_trait_impl[impl_143] <> std::ops::arith::Div<  > for u8 where  {
    fn «div»<> (self : u8, other : u8) -> u8 {
        #uDiv(self, other) : u8;
}
}

nr_trait_impl[impl_144] <> std::ops::arith::Div<  > for u1 where  {
    fn «div»<> (self : u1, other : u1) -> u1 {
        #uDiv(self, other) : u1;
}
}

nr_trait_impl[impl_145] <> std::ops::arith::Div<  > for i8 where  {
    fn «div»<> (self : i8, other : i8) -> i8 {
        #iDiv(self, other) : i8;
}
}

nr_trait_impl[impl_146] <> std::ops::arith::Div<  > for i16 where  {
    fn «div»<> (self : i16, other : i16) -> i16 {
        #iDiv(self, other) : i16;
}
}

nr_trait_impl[impl_147] <> std::ops::arith::Div<  > for i32 where  {
    fn «div»<> (self : i32, other : i32) -> i32 {
        #iDiv(self, other) : i32;
}
}

nr_trait_impl[impl_148] <> std::ops::arith::Div<  > for i64 where  {
    fn «div»<> (self : i64, other : i64) -> i64 {
        #iDiv(self, other) : i64;
}
}

nr_trait_impl[impl_149] <> std::ops::arith::Rem<  > for u128 where  {
    fn «rem»<> (self : u128, other : u128) -> u128 {
        #uRem(self, other) : u128;
}
}

nr_trait_impl[impl_150] <> std::ops::arith::Rem<  > for u64 where  {
    fn «rem»<> (self : u64, other : u64) -> u64 {
        #uRem(self, other) : u64;
}
}

nr_trait_impl[impl_151] <> std::ops::arith::Rem<  > for u32 where  {
    fn «rem»<> (self : u32, other : u32) -> u32 {
        #uRem(self, other) : u32;
}
}

nr_trait_impl[impl_152] <> std::ops::arith::Rem<  > for u16 where  {
    fn «rem»<> (self : u16, other : u16) -> u16 {
        #uRem(self, other) : u16;
}
}

nr_trait_impl[impl_153] <> std::ops::arith::Rem<  > for u8 where  {
    fn «rem»<> (self : u8, other : u8) -> u8 {
        #uRem(self, other) : u8;
}
}

nr_trait_impl[impl_154] <> std::ops::arith::Rem<  > for u1 where  {
    fn «rem»<> (self : u1, other : u1) -> u1 {
        #uRem(self, other) : u1;
}
}

nr_trait_impl[impl_155] <> std::ops::arith::Rem<  > for i8 where  {
    fn «rem»<> (self : i8, other : i8) -> i8 {
        #iRem(self, other) : i8;
}
}

nr_trait_impl[impl_156] <> std::ops::arith::Rem<  > for i16 where  {
    fn «rem»<> (self : i16, other : i16) -> i16 {
        #iRem(self, other) : i16;
}
}

nr_trait_impl[impl_157] <> std::ops::arith::Rem<  > for i32 where  {
    fn «rem»<> (self : i32, other : i32) -> i32 {
        #iRem(self, other) : i32;
}
}

nr_trait_impl[impl_158] <> std::ops::arith::Rem<  > for i64 where  {
    fn «rem»<> (self : i64, other : i64) -> i64 {
        #iRem(self, other) : i64;
}
}

nr_trait_impl[impl_159] <> std::ops::arith::Neg<  > for Field where  {
    fn «neg»<> (self : Field) -> Field {
        #fNeg(self) : Field;
}
}

nr_trait_impl[impl_160] <> std::ops::arith::Neg<  > for i8 where  {
    fn «neg»<> (self : i8) -> i8 {
        #iNeg(self) : i8;
}
}

nr_trait_impl[impl_161] <> std::ops::arith::Neg<  > for i16 where  {
    fn «neg»<> (self : i16) -> i16 {
        #iNeg(self) : i16;
}
}

nr_trait_impl[impl_162] <> std::ops::arith::Neg<  > for i32 where  {
    fn «neg»<> (self : i32) -> i32 {
        #iNeg(self) : i32;
}
}

nr_trait_impl[impl_163] <> std::ops::arith::Neg<  > for i64 where  {
    fn «neg»<> (self : i64) -> i64 {
        #iNeg(self) : i64;
}
}

nr_trait_impl[impl_164] <> std::ops::arith::WrappingAdd<  > for u1 where  {
    fn «wrapping_add»<> (self : u1, y : u1) -> u1 {
        #uXor(self, y) : u1;
}
}

nr_trait_impl[impl_165] <> std::ops::arith::WrappingAdd<  > for u8 where  {
    fn «wrapping_add»<> (self : u8, y : u8) -> u8 {
        (@std::ops::arith::wrapping_add_hlp< u8 > as λ(u8, u8) → u8)(self, y);
}
}

nr_trait_impl[impl_166] <> std::ops::arith::WrappingAdd<  > for u16 where  {
    fn «wrapping_add»<> (self : u16, y : u16) -> u16 {
        (@std::ops::arith::wrapping_add_hlp< u16 > as λ(u16, u16) → u16)(self, y);
}
}

nr_trait_impl[impl_167] <> std::ops::arith::WrappingAdd<  > for u32 where  {
    fn «wrapping_add»<> (self : u32, y : u32) -> u32 {
        (@std::ops::arith::wrapping_add_hlp< u32 > as λ(u32, u32) → u32)(self, y);
}
}

nr_trait_impl[impl_168] <> std::ops::arith::WrappingAdd<  > for u64 where  {
    fn «wrapping_add»<> (self : u64, y : u64) -> u64 {
        (@std::ops::arith::wrapping_add_hlp< u64 > as λ(u64, u64) → u64)(self, y);
}
}

nr_trait_impl[impl_169] <> std::ops::arith::WrappingAdd<  > for u128 where  {
    fn «wrapping_add»<> (self : u128, y : u128) -> u128 {
        (@std::ops::arith::wrapping_add_hlp< u128 > as λ(u128, u128) → u128)(self, y);
}
}

nr_trait_impl[impl_170] <> std::ops::arith::WrappingAdd<  > for i8 where  {
    fn «wrapping_add»<> (self : i8, y : i8) -> i8 {
        (@std::ops::arith::wrapping_add_hlp< i8 > as λ(i8, i8) → i8)(self, y);
}
}

nr_trait_impl[impl_171] <> std::ops::arith::WrappingAdd<  > for i16 where  {
    fn «wrapping_add»<> (self : i16, y : i16) -> i16 {
        (@std::ops::arith::wrapping_add_hlp< i16 > as λ(i16, i16) → i16)(self, y);
}
}

nr_trait_impl[impl_172] <> std::ops::arith::WrappingAdd<  > for i32 where  {
    fn «wrapping_add»<> (self : i32, y : i32) -> i32 {
        (@std::ops::arith::wrapping_add_hlp< i32 > as λ(i32, i32) → i32)(self, y);
}
}

nr_trait_impl[impl_173] <> std::ops::arith::WrappingAdd<  > for i64 where  {
    fn «wrapping_add»<> (self : i64, y : i64) -> i64 {
        (@std::ops::arith::wrapping_add_hlp< i64 > as λ(i64, i64) → i64)(self, y);
}
}

nr_trait_impl[impl_174] <> std::ops::arith::WrappingAdd<  > for Field where  {
    fn «wrapping_add»<> (self : Field, y : Field) -> Field {
        #fAdd(self, y) : Field;
}
}

nr_trait_impl[impl_175] <> std::ops::arith::WrappingSub<  > for u1 where  {
    fn «wrapping_sub»<> (self : u1, y : u1) -> u1 {
        #uXor(self, y) : u1;
}
}

nr_trait_impl[impl_176] <> std::ops::arith::WrappingSub<  > for u8 where  {
    fn «wrapping_sub»<> (self : u8, y : u8) -> u8 {
        #cast((@std::ops::arith::wrapping_sub_hlp< u8 > as λ(u8, u8) → Field)(self, y)) : u8;
}
}

nr_trait_impl[impl_177] <> std::ops::arith::WrappingSub<  > for u16 where  {
    fn «wrapping_sub»<> (self : u16, y : u16) -> u16 {
        #cast((@std::ops::arith::wrapping_sub_hlp< u16 > as λ(u16, u16) → Field)(self, y)) : u16;
}
}

nr_trait_impl[impl_178] <> std::ops::arith::WrappingSub<  > for u32 where  {
    fn «wrapping_sub»<> (self : u32, y : u32) -> u32 {
        #cast((@std::ops::arith::wrapping_sub_hlp< u32 > as λ(u32, u32) → Field)(self, y)) : u32;
}
}

nr_trait_impl[impl_179] <> std::ops::arith::WrappingSub<  > for u64 where  {
    fn «wrapping_sub»<> (self : u64, y : u64) -> u64 {
        #cast((@std::ops::arith::wrapping_sub_hlp< u64 > as λ(u64, u64) → Field)(self, y)) : u64;
}
}

nr_trait_impl[impl_180] <> std::ops::arith::WrappingSub<  > for u128 where  {
    fn «wrapping_sub»<> (self : u128, y : u128) -> u128 {
        #cast((@std::ops::arith::wrapping_sub_hlp< u128 > as λ(u128, u128) → Field)(self, y)) : u128;
}
}

nr_trait_impl[impl_181] <> std::ops::arith::WrappingSub<  > for i8 where  {
    fn «wrapping_sub»<> (self : i8, y : i8) -> i8 {
        #cast((@std::ops::arith::wrapping_sub_hlp< i8 > as λ(i8, i8) → Field)(self, y)) : i8;
}
}

nr_trait_impl[impl_182] <> std::ops::arith::WrappingSub<  > for i16 where  {
    fn «wrapping_sub»<> (self : i16, y : i16) -> i16 {
        #cast((@std::ops::arith::wrapping_sub_hlp< i16 > as λ(i16, i16) → Field)(self, y)) : i16;
}
}

nr_trait_impl[impl_183] <> std::ops::arith::WrappingSub<  > for i32 where  {
    fn «wrapping_sub»<> (self : i32, y : i32) -> i32 {
        #cast((@std::ops::arith::wrapping_sub_hlp< i32 > as λ(i32, i32) → Field)(self, y)) : i32;
}
}

nr_trait_impl[impl_184] <> std::ops::arith::WrappingSub<  > for i64 where  {
    fn «wrapping_sub»<> (self : i64, y : i64) -> i64 {
        #cast((@std::ops::arith::wrapping_sub_hlp< i64 > as λ(i64, i64) → Field)(self, y)) : i64;
}
}

nr_trait_impl[impl_185] <> std::ops::arith::WrappingSub<  > for Field where  {
    fn «wrapping_sub»<> (self : Field, y : Field) -> Field {
        #fSub(self, y) : Field;
}
}

nr_trait_impl[impl_186] <> std::ops::arith::WrappingMul<  > for u1 where  {
    fn «wrapping_mul»<> (self : u1, y : u1) -> u1 {
        #uAnd(self, y) : u1;
}
}

nr_trait_impl[impl_187] <> std::ops::arith::WrappingMul<  > for u8 where  {
    fn «wrapping_mul»<> (self : u8, y : u8) -> u8 {
        (@std::ops::arith::wrapping_mul_hlp< u8 > as λ(u8, u8) → u8)(self, y);
}
}

nr_trait_impl[impl_188] <> std::ops::arith::WrappingMul<  > for u16 where  {
    fn «wrapping_mul»<> (self : u16, y : u16) -> u16 {
        (@std::ops::arith::wrapping_mul_hlp< u16 > as λ(u16, u16) → u16)(self, y);
}
}

nr_trait_impl[impl_189] <> std::ops::arith::WrappingMul<  > for u32 where  {
    fn «wrapping_mul»<> (self : u32, y : u32) -> u32 {
        (@std::ops::arith::wrapping_mul_hlp< u32 > as λ(u32, u32) → u32)(self, y);
}
}

nr_trait_impl[impl_190] <> std::ops::arith::WrappingMul<  > for u64 where  {
    fn «wrapping_mul»<> (self : u64, y : u64) -> u64 {
        (@std::ops::arith::wrapping_mul_hlp< u64 > as λ(u64, u64) → u64)(self, y);
}
}

nr_trait_impl[impl_191] <> std::ops::arith::WrappingMul<  > for i8 where  {
    fn «wrapping_mul»<> (self : i8, y : i8) -> i8 {
        (@std::ops::arith::wrapping_mul_hlp< i8 > as λ(i8, i8) → i8)(self, y);
}
}

nr_trait_impl[impl_192] <> std::ops::arith::WrappingMul<  > for i16 where  {
    fn «wrapping_mul»<> (self : i16, y : i16) -> i16 {
        (@std::ops::arith::wrapping_mul_hlp< i16 > as λ(i16, i16) → i16)(self, y);
}
}

nr_trait_impl[impl_193] <> std::ops::arith::WrappingMul<  > for i32 where  {
    fn «wrapping_mul»<> (self : i32, y : i32) -> i32 {
        (@std::ops::arith::wrapping_mul_hlp< i32 > as λ(i32, i32) → i32)(self, y);
}
}

nr_trait_impl[impl_194] <> std::ops::arith::WrappingMul<  > for i64 where  {
    fn «wrapping_mul»<> (self : i64, y : i64) -> i64 {
        (@std::ops::arith::wrapping_mul_hlp< i64 > as λ(i64, i64) → i64)(self, y);
}
}

nr_trait_impl[impl_195] <> std::ops::arith::WrappingMul<  > for u128 where  {
    fn «wrapping_mul»<> (self : u128, y : u128) -> u128 {
        (@std::ops::arith::wrapping_mul128_hlp<  > as λ(u128, u128) → u128)(self, y);
}
}

nr_trait_impl[impl_196] <> std::ops::arith::WrappingMul<  > for Field where  {
    fn «wrapping_mul»<> (self : Field, y : Field) -> Field {
        #fMul(self, y) : Field;
}
}

nr_def «ops»::«arith»::«wrapping_add_hlp»<T>(x : T, y : T) -> T {
    ((Field as std::convert::AsPrimitive< T >)::as_< T, Field > as λ(Field) → T)(#fAdd(((T as std::convert::AsPrimitive< Field >)::as_< Field, T > as λ(T) → Field)(x), ((T as std::convert::AsPrimitive< Field >)::as_< Field, T > as λ(T) → Field)(y)) : Field);
}

nr_def «ops»::«arith»::«wrapping_sub_hlp»<T>(x : T, y : T) -> Field {
    #fSub(#fAdd(((T as std::convert::AsPrimitive< Field >)::as_< Field, T > as λ(T) → Field)(x), 340282366920938463463374607431768211456 : Field) : Field, ((T as std::convert::AsPrimitive< Field >)::as_< Field, T > as λ(T) → Field)(y)) : Field;
}

nr_def «ops»::«arith»::«wrapping_mul_hlp»<T>(x : T, y : T) -> T {
    ((Field as std::convert::AsPrimitive< T >)::as_< T, Field > as λ(Field) → T)(#fMul(((T as std::convert::AsPrimitive< Field >)::as_< Field, T > as λ(T) → Field)(x), ((T as std::convert::AsPrimitive< Field >)::as_< Field, T > as λ(T) → Field)(y)) : Field);
}

nr_def «two_pow_64»<>() -> u128 {
    18446744073709551616 : u128
}

nr_def «ops»::«arith»::«split64»<>(x : u128) -> `(u64, u64) {
    #fresh() : `(u64, u64)
}

nr_def «ops»::«arith»::«split_into_64_bit_limbs»<>(x : u128) -> `(u64, u64) {
    let π0 = {        (@std::ops::arith::split64<  > as λ(u128) → `(u64, u64))(x);};
    let x_lo = π0.0;
    let x_hi = π0.1;
    #assert(#fEq(#cast(x) : Field, #fAdd(#cast(x_lo) : Field, #fMul(#cast(x_hi) : Field, #cast((@two_pow_64<  > as λ() → u128)()) : Field) : Field) : Field) : bool) : Unit;
    `(x_lo, x_hi);
}

nr_def «ops»::«arith»::«wrapping_mul128_hlp»<>(x : u128, y : u128) -> u128 {
    let π0 = (@std::ops::arith::split_into_64_bit_limbs<  > as λ(u128) → `(u64, u64))(x);
    let x_lo = π0.0;
    let x_hi = π0.1;
    let π0 = (@std::ops::arith::split_into_64_bit_limbs<  > as λ(u128) → `(u64, u64))(y);
    let y_lo = π0.0;
    let y_hi = π0.1;
    let low = #fMul(#cast(x_lo) : Field, #cast(y_lo) : Field) : Field;
    let lo = #cast(#cast(low) : u64) : Field;
    let carry = #fDiv(#fSub(low, lo) : Field, #cast((@two_pow_64<  > as λ() → u128)()) : Field) : Field;
    let high = #fAdd(#fAdd(#fMul(#cast(x_lo) : Field, #cast(y_hi) : Field) : Field, #fMul(#cast(x_hi) : Field, #cast(y_lo) : Field) : Field) : Field, carry) : Field;
    let hi = #cast(#cast(high) : u64) : Field;
    #cast(#fAdd(lo, #fMul(#cast((@two_pow_64<  > as λ() → u128)()) : Field, hi) : Field) : Field) : u128;
}


def Ops.Arith.env := Lampe.Env.mk [«ops::arith::split64», «ops::arith::split_into_64_bit_limbs», «ops::arith::wrapping_add_hlp», «ops::arith::wrapping_mul128_hlp», «ops::arith::wrapping_mul_hlp», «ops::arith::wrapping_sub_hlp», «two_pow_64»] [impl_105, impl_106, impl_107, impl_108, impl_109, impl_110, impl_111, impl_112, impl_113, impl_114, impl_115, impl_116, impl_117, impl_118, impl_119, impl_120, impl_121, impl_122, impl_123, impl_124, impl_125, impl_126, impl_127, impl_128, impl_129, impl_130, impl_131, impl_132, impl_133, impl_134, impl_135, impl_136, impl_137, impl_138, impl_139, impl_140, impl_141, impl_142, impl_143, impl_144, impl_145, impl_146, impl_147, impl_148, impl_149, impl_150, impl_151, impl_152, impl_153, impl_154, impl_155, impl_156, impl_157, impl_158, impl_159, impl_160, impl_161, impl_162, impl_163, impl_164, impl_165, impl_166, impl_167, impl_168, impl_169, impl_170, impl_171, impl_172, impl_173, impl_174, impl_175, impl_176, impl_177, impl_178, impl_179, impl_180, impl_181, impl_182, impl_183, impl_184, impl_185, impl_186, impl_187, impl_188, impl_189, impl_190, impl_191, impl_192, impl_193, impl_194, impl_195, impl_196]