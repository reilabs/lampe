-- Generated by lampe

import «std-0.0.0».Extracted.GeneratedTypes
import Lampe

open Lampe

namespace «std-0.0.0»
namespace Extracted

nr_def «meta»::«tests»::«returning_versus_macro_insertion»<>() -> Unit {
    #unit;
}

nr_trait_impl[impl_427] <> std::meta::tests::FieldCount<  > for meta::tests::Bar<  > where  {
    fn «field_count»<> () -> u32 {
        2 : u32;
}
}

nr_trait_impl[impl_303] <> std::meta::tests::DoNothing<  > for meta::tests::Bar<  > where  {
    fn «do_nothing»<> (_ : meta::tests::Bar<  >) -> Unit {

}
}

nr_def «meta»::«tests»::«concatenate_test»<>() -> Unit {
    #unit;
}

nr_def «meta»::«tests»::«remove_unused_warnings»<>() -> Unit {
    let _? = meta::tests::Bar<  > { 1 : Field, [2 : Field, 3 : Field] };
    let _? = meta::tests::MyStruct<  > { 1 : i32 };
    let _? = meta::tests::MyOtherStruct<  > { 2 : u32 };
    let _? = (@std::meta::tests::derive_do_nothing<  > as λ(TypeDefinition) → Quoted)((@std::panic::panic< `(), TypeDefinition, 0 : u32 > as λ(fmtstr<0, ()>) → TypeDefinition)(#format("", )));
    let _? = (@std::meta::tests::derive_do_nothing_alt<  > as λ(TypeDefinition) → Quoted)((@std::panic::panic< `(), TypeDefinition, 0 : u32 > as λ(fmtstr<0, ()>) → TypeDefinition)(#format("", )));
    if false {
            (@std::meta::tests::remove_unused_warnings<  > as λ() → Unit)();
    };
}


def Meta.Mod.env := Lampe.Env.mk [«meta::tests::concatenate_test», «meta::tests::remove_unused_warnings», «meta::tests::returning_versus_macro_insertion»] [impl_303, impl_427]