-- Generated by lampe

import «std-0.0.0».Extracted.GeneratedTypes
import Lampe

open Lampe

namespace «std-0.0.0»
namespace Extracted

nr_trait_impl[impl_289] <> std::cmp::Eq<> for meta::op::UnaryOp<> where  {
    fn «eq»<> (self : meta::op::UnaryOp<>, other : meta::op::UnaryOp<>) -> bool {
        #fEq((self as meta::op::UnaryOp<>).op, (other as meta::op::UnaryOp<>).op) : bool;
}
}

nr_trait_impl[impl_290] <> std::hash::Hash<> for meta::op::UnaryOp<> where  {
    fn «hash»<H> (self : meta::op::UnaryOp<>, h : &H) -> Unit {
        ((Field as std::hash::Hash<>)::hash<> as λ(Field, &H) → Unit)((self as meta::op::UnaryOp<>).op, h);
}
}

nr_def «meta»::«op»::«UnaryOp»::«is_minus»<>(self : meta::op::UnaryOp<>) -> bool {
    #fEq((self as meta::op::UnaryOp<>).op, 0 : Field) : bool;
}

nr_def «meta»::«op»::«UnaryOp»::«is_not»<>(self : meta::op::UnaryOp<>) -> bool {
    #fEq((self as meta::op::UnaryOp<>).op, 1 : Field) : bool;
}

nr_def «meta»::«op»::«UnaryOp»::«is_mutable_reference»<>(self : meta::op::UnaryOp<>) -> bool {
    #fEq((self as meta::op::UnaryOp<>).op, 2 : Field) : bool;
}

nr_def «meta»::«op»::«UnaryOp»::«is_dereference»<>(self : meta::op::UnaryOp<>) -> bool {
    #fEq((self as meta::op::UnaryOp<>).op, 3 : Field) : bool;
}

nr_trait_impl[impl_291] <> std::cmp::Eq<> for meta::op::BinaryOp<> where  {
    fn «eq»<> (self : meta::op::BinaryOp<>, other : meta::op::BinaryOp<>) -> bool {
        #fEq((self as meta::op::BinaryOp<>).op, (other as meta::op::BinaryOp<>).op) : bool;
}
}

nr_trait_impl[impl_292] <> std::hash::Hash<> for meta::op::BinaryOp<> where  {
    fn «hash»<H> (self : meta::op::BinaryOp<>, h : &H) -> Unit {
        ((Field as std::hash::Hash<>)::hash<> as λ(Field, &H) → Unit)((self as meta::op::BinaryOp<>).op, h);
}
}

nr_def «meta»::«op»::«BinaryOp»::«is_add»<>(self : meta::op::BinaryOp<>) -> bool {
    #fEq((self as meta::op::BinaryOp<>).op, 0 : Field) : bool;
}

nr_def «meta»::«op»::«BinaryOp»::«is_subtract»<>(self : meta::op::BinaryOp<>) -> bool {
    #fEq((self as meta::op::BinaryOp<>).op, 1 : Field) : bool;
}

nr_def «meta»::«op»::«BinaryOp»::«is_multiply»<>(self : meta::op::BinaryOp<>) -> bool {
    #fEq((self as meta::op::BinaryOp<>).op, 2 : Field) : bool;
}

nr_def «meta»::«op»::«BinaryOp»::«is_divide»<>(self : meta::op::BinaryOp<>) -> bool {
    #fEq((self as meta::op::BinaryOp<>).op, 3 : Field) : bool;
}

nr_def «meta»::«op»::«BinaryOp»::«is_equal»<>(self : meta::op::BinaryOp<>) -> bool {
    #fEq((self as meta::op::BinaryOp<>).op, 4 : Field) : bool;
}

nr_def «meta»::«op»::«BinaryOp»::«is_not_equal»<>(self : meta::op::BinaryOp<>) -> bool {
    #fEq((self as meta::op::BinaryOp<>).op, 5 : Field) : bool;
}

nr_def «meta»::«op»::«BinaryOp»::«is_less_than»<>(self : meta::op::BinaryOp<>) -> bool {
    #fEq((self as meta::op::BinaryOp<>).op, 6 : Field) : bool;
}

nr_def «meta»::«op»::«BinaryOp»::«is_less_than_or_equal»<>(self : meta::op::BinaryOp<>) -> bool {
    #fEq((self as meta::op::BinaryOp<>).op, 7 : Field) : bool;
}

nr_def «meta»::«op»::«BinaryOp»::«is_greater_than»<>(self : meta::op::BinaryOp<>) -> bool {
    #fEq((self as meta::op::BinaryOp<>).op, 8 : Field) : bool;
}

nr_def «meta»::«op»::«BinaryOp»::«is_greater_than_or_equal»<>(self : meta::op::BinaryOp<>) -> bool {
    #fEq((self as meta::op::BinaryOp<>).op, 9 : Field) : bool;
}

nr_def «meta»::«op»::«BinaryOp»::«is_and»<>(self : meta::op::BinaryOp<>) -> bool {
    #fEq((self as meta::op::BinaryOp<>).op, 10 : Field) : bool;
}

nr_def «meta»::«op»::«BinaryOp»::«is_or»<>(self : meta::op::BinaryOp<>) -> bool {
    #fEq((self as meta::op::BinaryOp<>).op, 11 : Field) : bool;
}

nr_def «meta»::«op»::«BinaryOp»::«is_xor»<>(self : meta::op::BinaryOp<>) -> bool {
    #fEq((self as meta::op::BinaryOp<>).op, 12 : Field) : bool;
}

nr_def «meta»::«op»::«BinaryOp»::«is_shift_right»<>(self : meta::op::BinaryOp<>) -> bool {
    #fEq((self as meta::op::BinaryOp<>).op, 13 : Field) : bool;
}

nr_def «meta»::«op»::«BinaryOp»::«is_shift_left»<>(self : meta::op::BinaryOp<>) -> bool {
    #fEq((self as meta::op::BinaryOp<>).op, 14 : Field) : bool;
}

nr_def «meta»::«op»::«BinaryOp»::«is_modulo»<>(self : meta::op::BinaryOp<>) -> bool {
    #fEq((self as meta::op::BinaryOp<>).op, 15 : Field) : bool;
}


def Meta.Op.env := Lampe.Env.mk [«meta::op::BinaryOp::is_add», «meta::op::BinaryOp::is_and», «meta::op::BinaryOp::is_divide», «meta::op::BinaryOp::is_equal», «meta::op::BinaryOp::is_greater_than_or_equal», «meta::op::BinaryOp::is_greater_than», «meta::op::BinaryOp::is_less_than_or_equal», «meta::op::BinaryOp::is_less_than», «meta::op::BinaryOp::is_modulo», «meta::op::BinaryOp::is_multiply», «meta::op::BinaryOp::is_not_equal», «meta::op::BinaryOp::is_or», «meta::op::BinaryOp::is_shift_left», «meta::op::BinaryOp::is_shift_right», «meta::op::BinaryOp::is_subtract», «meta::op::BinaryOp::is_xor», «meta::op::UnaryOp::is_dereference», «meta::op::UnaryOp::is_minus», «meta::op::UnaryOp::is_mutable_reference», «meta::op::UnaryOp::is_not»] [impl_289, impl_290, impl_291, impl_292]