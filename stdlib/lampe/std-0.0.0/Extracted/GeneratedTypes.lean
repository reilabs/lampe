-- Generated by lampe

import Lampe

open Lampe

namespace «std-0.0.0»
namespace Extracted

nr_struct_def option::Option<T> {
    _is_some : bool,
    _value : T
}

nr_struct_def collections::map::Slot<K, V> {
    _key_value : option::Option< `(K, V) >,
    _is_deleted : bool
}

nr_struct_def collections::map::HashMap<K, V, @N : u32, B> {
    _table : [collections::map::Slot< K, V >; N],
    _len : u32,
    _build_hasher : B
}

nr_struct_def collections::umap::Slot<K, V> {
    _key_value : option::Option< `(K, V) >,
    _is_deleted : bool
}

nr_struct_def collections::umap::UHashMap<K, V, B> {
    _table : [collections::umap::Slot< K, V >],
    _len : u32,
    _build_hasher : B
}

nr_struct_def collections::bounded_vec::BoundedVec<T, @MaxLen : u32> {
    storage : [T; MaxLen],
    len : u32
}

nr_struct_def embedded_curve_ops::EmbeddedCurvePoint<> {
    x : Field,
    y : Field,
    is_infinite : bool
}

nr_type_alias DeriveFunction<> = λ(TypeDefinition) → Quoted

nr_struct_def hash::poseidon2::Poseidon2Hasher<> {
    _state : [Field]
}

nr_struct_def cmp::Ordering<> {
    result : Field
}

nr_struct_def collections::vec::Vec<T> {
    slice : [T]
}

nr_struct_def embedded_curve_ops::EmbeddedCurveScalar<> {
    lo : Field,
    hi : Field
}

nr_struct_def hash::BuildHasherDefault<H> {

}

nr_struct_def meta::op::BinaryOp<> {
    op : Field
}

nr_struct_def meta::tests::MyOtherStruct<> {
    my_other_field : u32
}

nr_struct_def array::check_shuffle::test::CompoundStruct<> {
    a : bool,
    b : Field,
    c : u64
}

nr_struct_def meta::tests::Bar<> {
    x : Field,
    y : [Field; 2]
}

nr_struct_def meta::tests::MyStruct<> {
    my_field : i32
}

nr_struct_def meta::op::UnaryOp<> {
    op : Field
}

nr_struct_def hash::poseidon2::Poseidon2<> {
    cache : [Field; 3],
    state : [Field; 4],
    cache_size : u32,
    squeeze_mode : bool
}

nr_struct_def test::OracleMock<> {
    id : Field
}

nr_trait_def std::append::Append<>[] {
    fn empty<>() -> Self;
    fn append<>(Self, Self) -> Self;
}

nr_trait_def std::cmp::Eq<>[] {
    fn eq<>(Self, Self) -> bool;
}

nr_trait_def std::cmp::Ord<>[] {
    fn cmp<>(Self, Self) -> cmp::Ordering<  >;
}

nr_trait_def std::convert::AsPrimitive<T>[] {
    fn as_<>(Self) -> T;
}

nr_trait_def std::convert::From<T>[] {
    fn from<>(T) -> Self;
}

nr_trait_def std::convert::Into<T>[] {
    fn into<>(Self) -> T;
}

nr_trait_def std::default::Default<>[] {
    fn default<>() -> Self;
}

nr_trait_def std::hash::BuildHasher<>[H] {
    fn build_hasher<>(Self) -> H;
}

nr_trait_def std::hash::Hash<>[] {
    fn hash<H>(Self, &H) -> Unit;
}

nr_trait_def std::hash::Hasher<>[] {
    fn finish<>(Self) -> Field;
    fn write<>(&Self, Field) -> Unit;
}

nr_trait_def std::meta::ctstring::AsCtString<>[] {
    fn as_ctstring<>(Self) -> CtString;
}

nr_trait_def std::meta::tests::DoNothing<>[] {
    fn do_nothing<>(Self) -> Unit;
}

nr_trait_def std::meta::tests::FieldCount<>[] {
    fn field_count<>() -> u32;
}

nr_trait_def std::ops::arith::Add<>[] {
    fn add<>(Self, Self) -> Self;
}

nr_trait_def std::ops::arith::Div<>[] {
    fn div<>(Self, Self) -> Self;
}

nr_trait_def std::ops::arith::Mul<>[] {
    fn mul<>(Self, Self) -> Self;
}

nr_trait_def std::ops::arith::Neg<>[] {
    fn neg<>(Self) -> Self;
}

nr_trait_def std::ops::arith::Rem<>[] {
    fn rem<>(Self, Self) -> Self;
}

nr_trait_def std::ops::arith::Sub<>[] {
    fn sub<>(Self, Self) -> Self;
}

nr_trait_def std::ops::arith::WrappingAdd<>[] {
    fn wrapping_add<>(Self, Self) -> Self;
}

nr_trait_def std::ops::arith::WrappingMul<>[] {
    fn wrapping_mul<>(Self, Self) -> Self;
}

nr_trait_def std::ops::arith::WrappingSub<>[] {
    fn wrapping_sub<>(Self, Self) -> Self;
}

nr_trait_def std::ops::bit::BitAnd<>[] {
    fn bitand<>(Self, Self) -> Self;
}

nr_trait_def std::ops::bit::BitOr<>[] {
    fn bitor<>(Self, Self) -> Self;
}

nr_trait_def std::ops::bit::BitXor<>[] {
    fn bitxor<>(Self, Self) -> Self;
}

nr_trait_def std::ops::bit::Not<>[] {
    fn not<>(Self) -> Self;
}

nr_trait_def std::ops::bit::Shl<>[] {
    fn shl<>(Self, u8) -> Self;
}

nr_trait_def std::ops::bit::Shr<>[] {
    fn shr<>(Self, u8) -> Self;
}